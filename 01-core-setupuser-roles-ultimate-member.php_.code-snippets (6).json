{"generator":"Code Snippets v3.7.0","date_created":"2025-09-26 10:47","snippets":[{"id":7,"name":"01-core-setup\/user-roles-ultimate-member.php","code":"\/**\n * User Roles and Ultimate Member Integration\n * Add this to Code Snippets plugin\n * Requires Ultimate Member plugin to be installed\n *\/\n\n\/\/ Create custom user roles\nadd_action('init', 'jobmatch_create_user_roles');\n\nfunction jobmatch_create_user_roles() {\n    \/\/ Only run once\n    if (get_option('jobmatch_roles_created')) {\n        return;\n    }\n\n    \/\/ Developer role\n    add_role('developer', 'Developer', array(\n        'read' => true,\n        'edit_posts' => false,\n        'delete_posts' => false,\n        'upload_files' => true,\n        'edit_profile' => true,\n    ));\n\n    \/\/ Company role  \n    add_role('company', 'Company', array(\n        'read' => true,\n        'edit_posts' => true,\n        'delete_posts' => true,\n        'publish_posts' => true,\n        'upload_files' => true,\n        'edit_profile' => true,\n        'edit_jobs' => true,\n        'publish_jobs' => true,\n        'delete_jobs' => true,\n    ));\n\n    update_option('jobmatch_roles_created', true);\n}\n\n\/\/ Ultimate Member - Add custom fields for registration\nadd_action('um_after_register_fields', 'jobmatch_add_registration_fields');\n\nfunction jobmatch_add_registration_fields($args) {\n    \/\/ Role selection field (this should be added via UM form builder, but we can set it programmatically)\n    ?>\n    <div class=\"um-field um-field-radio um-field-role_selection\">\n        <div class=\"um-field-label\">\n            <label for=\"role_selection\">I am registering as:<\/label>\n        <\/div>\n        <div class=\"um-field-area\">\n            <label><input type=\"radio\" name=\"role_selection\" value=\"developer\" required> \ud83d\udc68\u200d\ud83d\udcbb Developer - Looking for opportunities<\/label><br>\n            <label><input type=\"radio\" name=\"role_selection\" value=\"company\" required> \ud83c\udfe2 Company - Looking to hire talent<\/label>\n        <\/div>\n    <\/div>\n    <?php\n}\n\n\/\/ Process role selection after registration\nadd_action('um_after_user_register', 'jobmatch_process_role_selection');\n\nfunction jobmatch_process_role_selection($user_id) {\n    if (isset($_POST['role_selection'])) {\n        $role = sanitize_text_field($_POST['role_selection']);\n        \n        if (in_array($role, array('developer', 'company'))) {\n            \/\/ Remove default subscriber role and add selected role\n            $user = new WP_User($user_id);\n            $user->remove_role('subscriber');\n            $user->add_role($role);\n            \n            \/\/ Set user meta\n            update_user_meta($user_id, 'user_role', $role);\n            update_user_meta($user_id, 'onboarding_complete', false);\n            \n            \/\/ Initialize role-specific data\n            if ($role === 'developer') {\n                jobmatch_initialize_developer($user_id);\n            } elseif ($role === 'company') {\n                jobmatch_initialize_company($user_id);\n            }\n            \n            \/\/ Redirect to onboarding\n            update_user_meta($user_id, 'redirect_after_login', home_url('\/onboarding\/'));\n        }\n    }\n}\n\n\/\/ Initialize developer profile\nfunction jobmatch_initialize_developer($user_id) {\n    \/\/ Set default values\n    update_user_meta($user_id, 'profile_visibility', 'active');\n    update_user_meta($user_id, 'work_preference', 'hybrid');\n    update_user_meta($user_id, 'salary_expectation', 60000);\n    update_user_meta($user_id, 'experience_level', 'mid');\n    update_user_meta($user_id, 'tech_skills', array());\n    update_user_meta($user_id, 'culture_answers', array());\n    update_user_meta($user_id, 'postal_code', '');\n    update_user_meta($user_id, 'anonymous_avatar', 'avatar_' . rand(1, 30));\n    update_user_meta($user_id, 'anonymous_display_name', 'Developer #' . $user_id);\n    \n    \/\/ Set coordinates to default (Berlin)\n    update_user_meta($user_id, 'lat_lng', '52.5200,13.4050');\n}\n\n\/\/ Initialize company profile  \nfunction jobmatch_initialize_company($user_id) {\n    \/\/ Set default values\n    update_user_meta($user_id, 'credit_balance', 25); \/\/ Start with 25 free credits\n    update_user_meta($user_id, 'company_size', '10-50');\n    update_user_meta($user_id, 'industry', 'technology');\n    update_user_meta($user_id, 'culture_answers', array());\n    update_user_meta($user_id, 'postal_code', '');\n    update_user_meta($user_id, 'anonymous_display_name', 'Company #' . $user_id);\n    update_user_meta($user_id, 'real_company_name', '');\n    update_user_meta($user_id, 'real_website', '');\n    update_user_meta($user_id, 'real_logo_url', '');\n    \n    \/\/ Set coordinates to default (Berlin)\n    update_user_meta($user_id, 'lat_lng', '52.5200,13.4050');\n    \n    \/\/ Add initial credit transaction\n    jobmatch_add_credit_transaction($user_id, 'initial', 25, 'Welcome bonus credits');\n    \n    \/\/ Send welcome notification\n    jobmatch_add_notification($user_id, 'welcome', \n        'Welcome to DevMatch!', \n        'You have received 25 free credits to start matching with developers.'\n    );\n}\n\n\/\/ Prevent cross-role visibility in user queries\nadd_action('pre_get_users', 'jobmatch_filter_users_by_role');\n\nfunction jobmatch_filter_users_by_role($query) {\n    if (is_admin()) return; \/\/ Don't filter admin queries\n    \n    $current_user = wp_get_current_user();\n    $current_role = get_user_meta($current_user->ID, 'user_role', true);\n    \n    if ($current_role === 'developer') {\n        \/\/ Developers can only see companies\n        $query->set('meta_query', array(\n            array(\n                'key' => 'user_role',\n                'value' => 'company',\n                'compare' => '='\n            )\n        ));\n    } elseif ($current_role === 'company') {\n        \/\/ Companies can only see developers\n        $query->set('meta_query', array(\n            array(\n                'key' => 'user_role',\n                'value' => 'developer',\n                'compare' => '='\n            )\n        ));\n    }\n}\n\n\/\/ Add Ultimate Member custom fields programmatically\nadd_action('um_after_form_fields', 'jobmatch_add_um_custom_fields');\n\nfunction jobmatch_add_um_custom_fields($args) {\n    \/\/ Only add to registration forms\n    if ($args['mode'] !== 'register') return;\n    \n    ?>\n    <script>\n    jQuery(document).ready(function($) {\n        \/\/ Hide\/show fields based on role selection\n        $('input[name=\"role_selection\"]').change(function() {\n            var role = $(this).val();\n            $('.um-field-developer-only, .um-field-company-only').hide();\n            $('.um-field-' + role + '-only').show();\n        });\n    });\n    <\/script>\n    \n    <style>\n    .um-field-developer-only, .um-field-company-only { display: none; }\n    .um-field-role_selection label { display: block; margin: 10px 0; padding: 10px; border: 2px solid #ddd; border-radius: 5px; }\n    .um-field-role_selection input:checked + label { border-color: #007cba; background-color: #f0f8ff; }\n    <\/style>\n    <?php\n}\n\n\/\/ Redirect users after login based on their role and onboarding status\nadd_action('wp_login', 'jobmatch_redirect_after_login', 10, 2);\n\nfunction jobmatch_redirect_after_login($user_login, $user) {\n    $user_role = get_user_meta($user->ID, 'user_role', true);\n    $onboarding_complete = get_user_meta($user->ID, 'onboarding_complete', true);\n    $custom_redirect = get_user_meta($user->ID, 'redirect_after_login', true);\n    \n    \/\/ Check if there's a custom redirect\n    if ($custom_redirect) {\n        delete_user_meta($user->ID, 'redirect_after_login');\n        wp_redirect($custom_redirect);\n        exit;\n    }\n    \n    \/\/ If onboarding not complete, redirect to onboarding\n    if (!$onboarding_complete) {\n        wp_redirect(home_url('\/onboarding\/'));\n        exit;\n    }\n    \n    \/\/ Redirect to appropriate dashboard\n    if ($user_role === 'developer') {\n        wp_redirect(home_url('\/developer-dashboard\/'));\n        exit;\n    } elseif ($user_role === 'company') {\n        wp_redirect(home_url('\/company-dashboard\/'));\n        exit;\n    }\n}\n\n\/\/ Update user last login time\nadd_action('wp_login', 'jobmatch_update_last_login');\n\nfunction jobmatch_update_last_login($user_login, $user) {\n    update_user_meta($user->ID, 'last_login', current_time('mysql'));\n}\n\n\/\/ Add custom profile fields to Ultimate Member\nadd_filter('um_predefined_fields_hook', 'jobmatch_add_predefined_fields');\n\nfunction jobmatch_add_predefined_fields($fields) {\n    \/\/ Developer fields\n    $fields['tech_skills'] = array(\n        'title' => 'Tech Skills',\n        'metakey' => 'tech_skills',\n        'type' => 'multiselect',\n        'label' => 'Select your technical skills',\n        'options' => array(\n            'react' => 'React',\n            'vue' => 'Vue.js', \n            'angular' => 'Angular',\n            'node' => 'Node.js',\n            'python' => 'Python',\n            'php' => 'PHP',\n            'java' => 'Java',\n            'csharp' => 'C#',\n            'javascript' => 'JavaScript',\n            'typescript' => 'TypeScript',\n            'aws' => 'AWS',\n            'docker' => 'Docker',\n            'postgresql' => 'PostgreSQL',\n            'mongodb' => 'MongoDB'\n        ),\n        'required' => 1,\n    );\n    \n    $fields['salary_expectation'] = array(\n        'title' => 'Salary Expectation',\n        'metakey' => 'salary_expectation',\n        'type' => 'number',\n        'label' => 'Expected salary (\u20ac per year)',\n        'required' => 1,\n        'min' => 30000,\n        'max' => 150000,\n    );\n    \n    $fields['work_preference'] = array(\n        'title' => 'Work Preference',\n        'metakey' => 'work_preference',\n        'type' => 'radio',\n        'label' => 'Preferred work arrangement',\n        'options' => array(\n            'remote' => 'Remote only',\n            'onsite' => 'On-site only',\n            'hybrid' => 'Hybrid (flexible)',\n        ),\n        'required' => 1,\n    );\n    \n    $fields['experience_level'] = array(\n        'title' => 'Experience Level',\n        'metakey' => 'experience_level',\n        'type' => 'select',\n        'label' => 'Your experience level',\n        'options' => array(\n            'junior' => 'Junior (0-2 years)',\n            'mid' => 'Mid-level (2-5 years)',\n            'senior' => 'Senior (5+ years)',\n            'lead' => 'Lead\/Architect (8+ years)',\n        ),\n        'required' => 1,\n    );\n    \n    \/\/ Company fields\n    $fields['company_size'] = array(\n        'title' => 'Company Size',\n        'metakey' => 'company_size',\n        'type' => 'select',\n        'label' => 'Number of employees',\n        'options' => array(\n            '1-10' => '1-10 employees',\n            '10-50' => '10-50 employees',\n            '50-200' => '50-200 employees',\n            '200-1000' => '200-1000 employees',\n            '1000+' => '1000+ employees',\n        ),\n        'required' => 1,\n    );\n    \n    $fields['real_company_name'] = array(\n        'title' => 'Company Name',\n        'metakey' => 'real_company_name',\n        'type' => 'text',\n        'label' => 'Official company name',\n        'help' => 'This will only be revealed after mutual matches',\n        'required' => 1,\n    );\n    \n    $fields['real_website'] = array(\n        'title' => 'Company Website',\n        'metakey' => 'real_website',\n        'type' => 'url',\n        'label' => 'Company website URL',\n        'help' => 'This will only be revealed after mutual matches',\n        'required' => 0,\n    );\n    \n    \/\/ Shared fields\n    $fields['postal_code'] = array(\n        'title' => 'Postal Code',\n        'metakey' => 'postal_code',\n        'type' => 'text',\n        'label' => 'Your postal code',\n        'required' => 1,\n        'max_chars' => 10,\n    );\n    \n    return $fields;\n}\n\n\/\/ Add role-based capability checks\nadd_filter('user_has_cap', 'jobmatch_role_based_capabilities', 10, 3);\n\nfunction jobmatch_role_based_capabilities($allcaps, $caps, $args) {\n    $user_id = $args[1] ?? get_current_user_id();\n    $user_role = get_user_meta($user_id, 'user_role', true);\n    \n    \/\/ Companies can manage jobs\n    if ($user_role === 'company') {\n        $allcaps['edit_jobs'] = true;\n        $allcaps['publish_jobs'] = true;\n        $allcaps['delete_jobs'] = true;\n        $allcaps['edit_others_jobs'] = false; \/\/ Can't edit other companies' jobs\n    }\n    \n    \/\/ Developers cannot manage jobs\n    if ($user_role === 'developer') {\n        $allcaps['edit_jobs'] = false;\n        $allcaps['publish_jobs'] = false;\n        $allcaps['delete_jobs'] = false;\n    }\n    \n    return $allcaps;\n}\n\n\/\/ Ajax handler for role selection validation\nadd_action('wp_ajax_validate_role_selection', 'jobmatch_validate_role_selection');\nadd_action('wp_ajax_nopriv_validate_role_selection', 'jobmatch_validate_role_selection');\n\nfunction jobmatch_validate_role_selection() {\n    $role = sanitize_text_field($_POST['role']);\n    \n    if (!in_array($role, array('developer', 'company'))) {\n        wp_send_json_error('Invalid role selected');\n    }\n    \n    wp_send_json_success('Role validated');\n}\n\n\/\/ Enqueue scripts for role selection\nadd_action('wp_enqueue_scripts', 'jobmatch_enqueue_role_scripts');\n\nfunction jobmatch_enqueue_role_scripts() {\n    if (is_page('register')) {\n        wp_enqueue_script('jquery');\n        wp_add_inline_script('jquery', '\n            jQuery(document).ready(function($) {\n                \/\/ Enhanced role selection with icons\n                $(\".um-field-role_selection label\").addClass(\"role-selection-card\");\n                \n                \/\/ Add visual feedback\n                $(\"input[name=\\'role_selection\\']\").change(function() {\n                    $(\".role-selection-card\").removeClass(\"selected\");\n                    $(this).closest(\"label\").addClass(\"selected\");\n                    \n                    \/\/ Show\/hide relevant fields\n                    var role = $(this).val();\n                    $(\".um-field\").hide();\n                    $(\".um-field:not(.um-field-developer-only):not(.um-field-company-only)\").show();\n                    $(\".um-field-\" + role + \"-only\").show();\n                });\n            });\n        ');\n    }\n}","active":true,"modified":"2025-09-22 20:13:32","revision":"1"}]}