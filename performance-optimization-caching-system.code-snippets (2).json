{"generator":"Code Snippets v3.7.0","date_created":"2025-09-26 10:48","snippets":[{"id":23,"name":"Performance Optimization & Caching System","code":"\n\/**\n * Performance Optimization & Caching System\n * Add this to Code Snippets plugin\n *\/\n\n\/\/ Object caching for expensive queries\nclass JobMatch_Cache {\n    private static $cache = array();\n    private static $cache_expiry = 3600; \/\/ 1 hour default\n    \n    public static function get($key, $group = 'default') {\n        $cache_key = $group . '_' . $key;\n        \n        if (isset(self::$cache[$cache_key])) {\n            $cache_data = self::$cache[$cache_key];\n            if (time() < $cache_data['expires']) {\n                return $cache_data['data'];\n            } else {\n                unset(self::$cache[$cache_key]);\n            }\n        }\n        \n        \/\/ Try WordPress object cache\n        $data = wp_cache_get($key, 'jobmatch_' . $group);\n        if ($data !== false) {\n            return $data;\n        }\n        \n        return false;\n    }\n    \n    public static function set($key, $data, $group = 'default', $expiry = null) {\n        $cache_key = $group . '_' . $key;\n        $expiry = $expiry ?: self::$cache_expiry;\n        \n        \/\/ Store in memory cache\n        self::$cache[$cache_key] = array(\n            'data' => $data,\n            'expires' => time() + $expiry\n        );\n        \n        \/\/ Store in WordPress object cache\n        wp_cache_set($key, $data, 'jobmatch_' . $group, $expiry);\n        \n        return true;\n    }\n    \n    public static function delete($key, $group = 'default') {\n        $cache_key = $group . '_' . $key;\n        unset(self::$cache[$cache_key]);\n        wp_cache_delete($key, 'jobmatch_' . $group);\n    }\n    \n    public static function flush($group = null) {\n        if ($group) {\n            \/\/ Clear specific group\n            foreach (self::$cache as $key => $data) {\n                if (strpos($key, $group . '_') === 0) {\n                    unset(self::$cache[$key]);\n                }\n            }\n            wp_cache_flush_group('jobmatch_' . $group);\n        } else {\n            \/\/ Clear all cache\n            self::$cache = array();\n            wp_cache_flush();\n        }\n    }\n}\n\n\/\/ Optimized user profile loading\nfunction jobmatch_get_cached_profile($user_id, $viewer_id = null) {\n    $cache_key = 'profile_' . $user_id . '_' . ($viewer_id ?: 'anonymous');\n    \n    $profile = JobMatch_Cache::get($cache_key, 'profiles');\n    if ($profile !== false) {\n        return $profile;\n    }\n    \n    \/\/ Generate profile and cache it\n    $profile = jobmatch_get_anonymous_profile($user_id, $viewer_id);\n    JobMatch_Cache::set($cache_key, $profile, 'profiles', 1800); \/\/ 30 minutes\n    \n    return $profile;\n}\n\n\/\/ Optimized match score retrieval\nfunction jobmatch_get_cached_match_score($user_id, $target_id, $target_type) {\n    $cache_key = \"score_{$user_id}_{$target_id}_{$target_type}\";\n    \n    $score = JobMatch_Cache::get($cache_key, 'scores');\n    if ($score !== false) {\n        return $score;\n    }\n    \n    \/\/ Get from database\n    $score = jobmatch_get_match_score($user_id, $target_id, $target_type);\n    if ($score) {\n        JobMatch_Cache::set($cache_key, $score, 'scores', 3600); \/\/ 1 hour\n    }\n    \n    return $score;\n}\n\n\/\/ Query optimization for job browsing\nfunction jobmatch_get_optimized_jobs($args = array()) {\n    $defaults = array(\n        'post_type' => 'jobs',\n        'post_status' => 'publish',\n        'posts_per_page' => 20,\n        'meta_query' => array(),\n        'tax_query' => array()\n    );\n    \n    $args = wp_parse_args($args, $defaults);\n    \n    \/\/ Create cache key from query args\n    $cache_key = 'jobs_' . md5(serialize($args));\n    \n    $jobs = JobMatch_Cache::get($cache_key, 'jobs');\n    if ($jobs !== false) {\n        return $jobs;\n    }\n    \n    \/\/ Optimize the query\n    add_filter('posts_clauses', 'jobmatch_optimize_job_query', 10, 2);\n    \n    $query = new WP_Query($args);\n    $jobs = $query->posts;\n    \n    remove_filter('posts_clauses', 'jobmatch_optimize_job_query', 10, 2);\n    \n    \/\/ Cache results\n    JobMatch_Cache::set($cache_key, $jobs, 'jobs', 900); \/\/ 15 minutes\n    \n    return $jobs;\n}\n\n\/\/ Query optimization callback\nfunction jobmatch_optimize_job_query($clauses, $query) {\n    global $wpdb;\n    \n    if (!$query->is_main_query() && $query->get('post_type') === 'jobs') {\n        \/\/ Add indexes for better performance\n        $clauses['join'] .= \" LEFT JOIN {$wpdb->postmeta} pm_salary ON {$wpdb->posts}.ID = pm_salary.post_id AND pm_salary.meta_key = 'salary_min'\";\n        $clauses['join'] .= \" LEFT JOIN {$wpdb->postmeta} pm_location ON {$wpdb->posts}.ID = pm_location.post_id AND pm_location.meta_key = 'job_location'\";\n        \n        \/\/ Optimize ordering\n        if (strpos($clauses['orderby'], 'pm_salary.meta_value') !== false) {\n            $clauses['orderby'] = str_replace(\n                'pm_salary.meta_value',\n                'CAST(pm_salary.meta_value AS UNSIGNED)',\n                $clauses['orderby']\n            );\n        }\n    }\n    \n    return $clauses;\n}\n\n\/\/ Database query optimization\nadd_action('init', 'jobmatch_optimize_database');\nfunction jobmatch_optimize_database() {\n    global $wpdb;\n    \n    \/\/ Add indexes if they don't exist\n    $indexes = array(\n        $wpdb->prefix . 'match_scores' => array(\n            'user_target_type_idx' => 'user_id, target_id, target_type',\n            'score_idx' => 'score DESC',\n            'updated_idx' => 'updated_at DESC'\n        ),\n        $wpdb->prefix . 'credit_transactions' => array(\n            'user_type_idx' => 'user_id, transaction_type',\n            'created_idx' => 'created_at DESC'\n        ),\n        $wpdb->prefix . 'jobmatch_notifications' => array(\n            'user_read_idx' => 'user_id, is_read',\n            'type_created_idx' => 'type, created_at DESC'\n        ),\n        $wpdb->usermeta => array(\n            'meta_key_value_idx' => 'meta_key, meta_value(10)'\n        )\n    );\n    \n    foreach ($indexes as $table => $table_indexes) {\n        foreach ($table_indexes as $index_name => $columns) {\n            \/\/ Check if index exists\n            $index_exists = $wpdb->get_var($wpdb->prepare(\n                \"SHOW INDEX FROM {$table} WHERE Key_name = %s\",\n                $index_name\n            ));\n            \n            if (!$index_exists) {\n                $wpdb->query(\"ALTER TABLE {$table} ADD INDEX {$index_name} ({$columns})\");\n            }\n        }\n    }\n}\n\n\/\/ Lazy loading for images and avatars\nfunction jobmatch_lazy_load_avatar($user_id, $size = 'medium') {\n    $profile = jobmatch_get_cached_profile($user_id);\n    \n    if ($profile['type'] === 'developer') {\n        return '<span class=\"jobmatch-avatar developer-avatar avatar-' . $size . ' lazy-load\" data-avatar=\"' . $profile['avatar'] . '\">' . $profile['avatar'] . '<\/span>';\n    } else {\n        return '<span class=\"jobmatch-avatar company-avatar avatar-' . $size . ' lazy-load\" data-icon=\"' . $profile['industry_icon'] . '\" data-color=\"' . $profile['industry_color'] . '\">' . $profile['industry_icon'] . '<\/span>';\n    }\n}\n\n\/\/ Background processing for expensive operations\nclass JobMatch_Background_Processor {\n    private static $queue_key = 'jobmatch_bg_queue';\n    \n    public static function add_task($task_type, $data) {\n        $tasks = get_option(self::$queue_key, array());\n        $tasks[] = array(\n            'type' => $task_type,\n            'data' => $data,\n            'created' => time(),\n            'attempts' => 0\n        );\n        update_option(self::$queue_key, $tasks);\n        \n        \/\/ Schedule processing if not already scheduled\n        if (!wp_next_scheduled('jobmatch_process_bg_queue')) {\n            wp_schedule_single_event(time() + 30, 'jobmatch_process_bg_queue');\n        }\n    }\n    \n    public static function process_queue() {\n        $tasks = get_option(self::$queue_key, array());\n        if (empty($tasks)) {\n            return;\n        }\n        \n        $processed = array();\n        $failed = array();\n        \n        foreach ($tasks as $task) {\n            $task['attempts']++;\n            \n            $success = false;\n            switch ($task['type']) {\n                case 'recalculate_scores':\n                    $success = self::process_score_recalculation($task['data']);\n                    break;\n                case 'send_notifications':\n                    $success = self::process_notifications($task['data']);\n                    break;\n                case 'cleanup_data':\n                    $success = self::process_cleanup($task['data']);\n                    break;\n            }\n            \n            if ($success) {\n                $processed[] = $task;\n            } elseif ($task['attempts'] >= 3) {\n                \/\/ Max attempts reached, log error\n                error_log('JobMatch background task failed: ' . print_r($task, true));\n                $processed[] = $task; \/\/ Remove from queue\n            } else {\n                $failed[] = $task;\n            }\n        }\n        \n        \/\/ Update queue with failed tasks\n        update_option(self::$queue_key, $failed);\n        \n        \/\/ Schedule next processing if tasks remain\n        if (!empty($failed)) {\n            wp_schedule_single_event(time() + 300, 'jobmatch_process_bg_queue'); \/\/ 5 minutes\n        }\n    }\n    \n    private static function process_score_recalculation($data) {\n        try {\n            $user_id = $data['user_id'];\n            jobmatch_recalculate_user_scores($user_id);\n            return true;\n        } catch (Exception $e) {\n            error_log('Score recalculation failed: ' . $e->getMessage());\n            return false;\n        }\n    }\n    \n    private static function process_notifications($data) {\n        try {\n            $notification_id = $data['notification_id'];\n            jobmatch_send_notification_email($notification_id);\n            return true;\n        } catch (Exception $e) {\n            error_log('Notification sending failed: ' . $e->getMessage());\n            return false;\n        }\n    }\n    \n    private static function process_cleanup($data) {\n        try {\n            jobmatch_cleanup_old_data($data['type']);\n            return true;\n        } catch (Exception $e) {\n            error_log('Data cleanup failed: ' . $e->getMessage());\n            return false;\n        }\n    }\n}\n\n\/\/ Hook background processor\nadd_action('jobmatch_process_bg_queue', array('JobMatch_Background_Processor', 'process_queue'));\n\n\/\/ Memory optimization for large datasets\nfunction jobmatch_batch_process_users($callback, $batch_size = 50) {\n    $total_users = wp_count_users();\n    $total_count = $total_users['total_users'];\n    \n    $processed = 0;\n    $offset = 0;\n    \n    while ($processed < $total_count) {\n        $users = get_users(array(\n            'fields' => 'ID',\n            'number' => $batch_size,\n            'offset' => $offset\n        ));\n        \n        if (empty($users)) {\n            break;\n        }\n        \n        foreach ($users as $user_id) {\n            call_user_func($callback, $user_id);\n        }\n        \n        $processed += count($users);\n        $offset += $batch_size;\n        \n        \/\/ Clear memory\n        wp_cache_flush();\n        if (function_exists('gc_collect_cycles')) {\n            gc_collect_cycles();\n        }\n        \n        \/\/ Small delay to prevent server overload\n        usleep(100000); \/\/ 0.1 seconds\n    }\n}\n\n\/\/ Image optimization and compression\nfunction jobmatch_optimize_uploaded_images($file) {\n    if (!function_exists('imagecreatefromjpeg')) {\n        return $file;\n    }\n    \n    $image_types = array(\n        IMAGETYPE_JPEG => array('imagecreatefromjpeg', 'imagejpeg', 90),\n        IMAGETYPE_PNG => array('imagecreatefrompng', 'imagepng', 9),\n    );\n    \n    $image_type = exif_imagetype($file['tmp_name']);\n    if (!isset($image_types[$image_type])) {\n        return $file;\n    }\n    \n    list($create_func, $save_func, $quality) = $image_types[$image_type];\n    \n    \/\/ Create image resource\n    $image = $create_func($file['tmp_name']);\n    if (!$image) {\n        return $file;\n    }\n    \n    \/\/ Get dimensions\n    $width = imagesx($image);\n    $height = imagesy($image);\n    \n    \/\/ Resize if too large\n    $max_width = 800;\n    $max_height = 600;\n    \n    if ($width > $max_width || $height > $max_height) {\n        $ratio = min($max_width \/ $width, $max_height \/ $height);\n        $new_width = round($width * $ratio);\n        $new_height = round($height * $ratio);\n        \n        $new_image = imagecreatetruecolor($new_width, $new_height);\n        \n        \/\/ Preserve transparency for PNG\n        if ($image_type === IMAGETYPE_PNG) {\n            imagealphablending($new_image, false);\n            imagesavealpha($new_image, true);\n        }\n        \n        imagecopyresampled($new_image, $image, 0, 0, 0, 0, $new_width, $new_height, $width, $height);\n        imagedestroy($image);\n        $image = $new_image;\n    }\n    \n    \/\/ Save optimized image\n    if ($image_type === IMAGETYPE_JPEG) {\n        imagejpeg($image, $file['tmp_name'], $quality);\n    } else {\n        imagepng($image, $file['tmp_name'], $quality);\n    }\n    \n    imagedestroy($image);\n    \n    \/\/ Update file size\n    $file['size'] = filesize($file['tmp_name']);\n    \n    return $file;\n}\nadd_filter('wp_handle_upload_prefilter', 'jobmatch_optimize_uploaded_images');\n\n\/\/ CSS and JS optimization\nfunction jobmatch_optimize_assets() {\n    if (!is_admin()) {\n        \/\/ Minimize CSS\/JS loading\n        wp_dequeue_style('wp-block-library-theme');\n        wp_dequeue_style('wc-block-style');\n        wp_dequeue_style('classic-theme-styles');\n        \n        \/\/ Load critical CSS inline\n        add_action('wp_head', 'jobmatch_inline_critical_css', 1);\n        \n        \/\/ Defer non-critical JavaScript\n        add_filter('script_loader_tag', 'jobmatch_defer_scripts', 10, 2);\n    }\n}\nadd_action('init', 'jobmatch_optimize_assets');\n\nfunction jobmatch_inline_critical_css() {\n    ?>\n    <style id=\"jobmatch-critical-css\">\n    \/* Critical CSS for above-the-fold content *\/\n    .jobmatch-avatar{display:inline-flex;align-items:center;justify-content:center;border-radius:50%;font-weight:bold;color:white}\n    .avatar-small{width:30px;height:30px;font-size:16px}\n    .avatar-medium{width:50px;height:50px;font-size:24px}\n    .developer-avatar{background:linear-gradient(135deg,#667eea,#764ba2)}\n    .match-score{padding:6px 12px;border-radius:20px;font-weight:bold;font-size:0.9rem;color:white}\n    .match-score.excellent{background:linear-gradient(135deg,#11998e,#38ef7d)}\n    .match-score.very-good{background:linear-gradient(135deg,#667eea,#764ba2)}\n    <\/style>\n    <?php\n}\n\nfunction jobmatch_defer_scripts($tag, $handle) {\n    $defer_scripts = array(\n        'jobmatch-dashboard',\n        'jobmatch-matching',\n        'jobmatch-chat'\n    );\n    \n    if (in_array($handle, $defer_scripts)) {\n        return str_replace(' src', ' defer src', $tag);\n    }\n    \n    return $tag;\n}\n\n\/\/ Database cleanup and maintenance\nfunction jobmatch_cleanup_old_data($type = 'all') {\n    global $wpdb;\n    \n    switch ($type) {\n        case 'match_scores':\n            \/\/ Delete match scores older than 60 days\n            $wpdb->query(\"DELETE FROM {$wpdb->prefix}match_scores WHERE created_at < DATE_SUB(NOW(), INTERVAL 60 DAY)\");\n            break;\n            \n        case 'notifications':\n            \/\/ Delete read notifications older than 30 days\n            $wpdb->query(\"DELETE FROM {$wpdb->prefix}jobmatch_notifications WHERE is_read = 1 AND created_at < DATE_SUB(NOW(), INTERVAL 30 DAY)\");\n            \/\/ Delete unread notifications older than 90 days\n            $wpdb->query(\"DELETE FROM {$wpdb->prefix}jobmatch_notifications WHERE is_read = 0 AND created_at < DATE_SUB(NOW(), INTERVAL 90 DAY)\");\n            break;\n            \n        case 'transactions':\n            \/\/ Don't delete transactions, but archive old ones\n            break;\n            \n        case 'sessions':\n            \/\/ Clean up expired transients\n            $wpdb->query(\"DELETE FROM {$wpdb->options} WHERE option_name LIKE '_transient_timeout_%' AND option_value < UNIX_TIMESTAMP()\");\n            $wpdb->query(\"DELETE FROM {$wpdb->options} WHERE option_name LIKE '_transient_%' AND option_name NOT IN (SELECT CONCAT('_transient_', SUBSTRING(option_name, 19)) FROM {$wpdb->options} WHERE option_name LIKE '_transient_timeout_%')\");\n            break;\n            \n        case 'all':\n            jobmatch_cleanup_old_data('match_scores');\n            jobmatch_cleanup_old_data('notifications');\n            jobmatch_cleanup_old_data('sessions');\n            break;\n    }\n    \n    \/\/ Optimize tables after cleanup\n    $tables = array(\n        $wpdb->prefix . 'match_scores',\n        $wpdb->prefix . 'jobmatch_notifications',\n        $wpdb->prefix . 'credit_transactions'\n    );\n    \n    foreach ($tables as $table) {\n        $wpdb->query(\"OPTIMIZE TABLE {$table}\");\n    }\n}\n\n\/\/ Schedule regular cleanup\nadd_action('wp', 'jobmatch_schedule_cleanup_cron');\nfunction jobmatch_schedule_cleanup_cron() {\n    if (!wp_next_scheduled('jobmatch_daily_cleanup')) {\n        wp_schedule_event(time(), 'daily', 'jobmatch_daily_cleanup');\n    }\n}\n\nadd_action('jobmatch_daily_cleanup', 'jobmatch_daily_cleanup_task');\nfunction jobmatch_daily_cleanup_task() {\n    jobmatch_cleanup_old_data('sessions');\n    \n    \/\/ Weekly cleanup for other data\n    if (date('w') === '0') { \/\/ Sunday\n        jobmatch_cleanup_old_data('all');\n    }\n}\n\n\/\/ Cache invalidation hooks\nadd_action('profile_update', 'jobmatch_invalidate_user_cache');\nadd_action('user_meta_updated', 'jobmatch_invalidate_user_cache');\nfunction jobmatch_invalidate_user_cache($user_id) {\n    JobMatch_Cache::flush('profiles');\n    JobMatch_Cache::flush('scores');\n}\n\nadd_action('transition_post_status', 'jobmatch_invalidate_job_cache', 10, 3);\nfunction jobmatch_invalidate_job_cache($new_status, $old_status, $post) {\n    if ($post->post_type === 'jobs') {\n        JobMatch_Cache::flush('jobs');\n    }\n}\n\n\/\/ Performance monitoring\nfunction jobmatch_performance_monitor() {\n    if (!defined('WP_DEBUG') || !WP_DEBUG) {\n        return;\n    }\n    \n    $start_time = defined('JOBMATCH_START_TIME') ? JOBMATCH_START_TIME : microtime(true);\n    $end_time = microtime(true);\n    $execution_time = ($end_time - $start_time) * 1000; \/\/ Convert to milliseconds\n    \n    $memory_usage = memory_get_peak_usage(true) \/ 1024 \/ 1024; \/\/ Convert to MB\n    \n    if ($execution_time > 1000 || $memory_usage > 50) { \/\/ Log if > 1s or > 50MB\n        error_log(\"JobMatch Performance Warning: {$execution_time}ms, {$memory_usage}MB memory\");\n    }\n}\nadd_action('wp_footer', 'jobmatch_performance_monitor');\n\n\/\/ Enable performance timing\nif (!defined('JOBMATCH_START_TIME')) {\n    define('JOBMATCH_START_TIME', microtime(true));\n}\n\n\/\/ Admin performance tools\nadd_action('wp_ajax_jobmatch_performance_report', 'jobmatch_ajax_performance_report');\nfunction jobmatch_ajax_performance_report() {\n    check_ajax_referer('jobmatch_admin', 'nonce');\n    \n    if (!current_user_can('manage_options')) {\n        wp_send_json_error('Insufficient permissions');\n    }\n    \n    global $wpdb;\n    \n    $report = array(\n        'database' => array(\n            'total_queries' => get_num_queries(),\n            'slow_queries' => $wpdb->get_var(\"SELECT COUNT(*) FROM information_schema.processlist WHERE Time > 1\"),\n            'table_sizes' => array()\n        ),\n        'cache' => array(\n            'hit_ratio' => wp_cache_get_stats(),\n            'memory_usage' => count(JobMatch_Cache::$cache)\n        ),\n        'memory' => array(\n            'current' => memory_get_usage(true),\n            'peak' => memory_get_peak_usage(true),\n            'limit' => ini_get('memory_limit')\n        )\n    );\n    \n    \/\/ Get table sizes\n    $tables = array('match_scores', 'credit_transactions', 'jobmatch_notifications');\n    foreach ($tables as $table) {\n        $size = $wpdb->get_var(\"SELECT ROUND(((data_length + index_length) \/ 1024 \/ 1024), 2) AS 'DB Size in MB' FROM information_schema.tables WHERE table_name = '{$wpdb->prefix}{$table}'\");\n        $report['database']['table_sizes'][$table] = $size . ' MB';\n    }\n    \n    wp_send_json_success($report);\n}","active":true,"modified":"2025-09-24 19:37:38","revision":"1"}]}