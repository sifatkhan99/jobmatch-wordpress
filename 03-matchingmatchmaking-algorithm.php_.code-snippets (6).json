{"generator":"Code Snippets v3.7.0","date_created":"2025-09-26 10:47","snippets":[{"id":9,"name":"03-matching\/matchmaking-algorithm.php","code":"\n\/**\n * Matchmaking Algorithm for Job Matching Platform\n * Add this to Code Snippets plugin\n *\/\n\n\/\/ Default matchmaking weights (can be configured in admin)\nfunction jobmatch_get_default_weights() {\n    return array(\n        'skills_match' => 35,      \/\/ Technical skills overlap\n        'salary_alignment' => 25,  \/\/ Salary expectation vs offer\n        'location_proximity' => 20, \/\/ Geographic distance\n        'culture_fit' => 15,       \/\/ Culture\/values alignment\n        'experience_level' => 5    \/\/ Experience level match\n    );\n}\n\n\/\/ Get current matchmaking weights from admin settings\nfunction jobmatch_get_matchmaking_weights() {\n    $weights = get_option('jobmatch_weights', jobmatch_get_default_weights());\n    \n    \/\/ Ensure weights add up to 100%\n    $total = array_sum($weights);\n    if ($total !== 100) {\n        foreach ($weights as $key => $value) {\n            $weights[$key] = ($value \/ $total) * 100;\n        }\n    }\n    \n    return $weights;\n}\n\n\/\/ Main function to calculate match score between developer and job\/company\nfunction jobmatch_calculate_match_score($developer_id, $target_id, $target_type = 'job') {\n    $weights = jobmatch_get_matchmaking_weights();\n    $scores = array();\n    \n    \/\/ Get developer data\n    $dev_skills = get_user_meta($developer_id, 'tech_skills', true) ?: array();\n    $dev_salary = intval(get_user_meta($developer_id, 'salary_expectation', true));\n    $dev_location = get_user_meta($developer_id, 'postal_code', true);\n    $dev_culture = get_user_meta($developer_id, 'culture_answers', true) ?: array();\n    $dev_experience = get_user_meta($developer_id, 'experience_level', true);\n    $dev_work_pref = get_user_meta($developer_id, 'work_preference', true);\n    \n    if ($target_type === 'job') {\n        \/\/ Calculate match with specific job\n        $scores = jobmatch_calculate_job_match($developer_id, $target_id, $weights);\n    } else {\n        \/\/ Calculate match with company (for company browsing developers)\n        $scores = jobmatch_calculate_company_match($developer_id, $target_id, $weights);\n    }\n    \n    \/\/ Calculate final weighted score\n    $final_score = 0;\n    foreach ($scores as $factor => $score) {\n        if (isset($weights[$factor])) {\n            $final_score += ($score * $weights[$factor] \/ 100);\n        }\n    }\n    \n    \/\/ Store\/update the match score in database\n    jobmatch_update_match_score($developer_id, $target_id, $target_type, round($final_score, 2), $scores);\n    \n    return array(\n        'score' => round($final_score, 2),\n        'factors' => $scores\n    );\n}\n\n\/\/ Calculate match between developer and specific job\nfunction jobmatch_calculate_job_match($developer_id, $job_id, $weights) {\n    $scores = array();\n    \n    \/\/ Get developer data\n    $dev_skills = get_user_meta($developer_id, 'tech_skills', true) ?: array();\n    $dev_salary = intval(get_user_meta($developer_id, 'salary_expectation', true));\n    $dev_location = get_user_meta($developer_id, 'postal_code', true);\n    $dev_culture = get_user_meta($developer_id, 'culture_answers', true) ?: array();\n    $dev_experience = get_user_meta($developer_id, 'experience_level', true);\n    $dev_work_pref = get_user_meta($developer_id, 'work_preference', true);\n    \n    \/\/ Get job data\n    $job_skills = wp_get_post_terms($job_id, 'tech_stack', array('fields' => 'names'));\n    $job_salary_min = intval(get_post_meta($job_id, 'salary_min', true));\n    $job_salary_max = intval(get_post_meta($job_id, 'salary_max', true));\n    $job_location = get_post_meta($job_id, 'job_location', true);\n    $job_postal = get_post_meta($job_id, 'job_postal_code', true);\n    $job_remote = get_post_meta($job_id, 'remote_work', true);\n    $job_experience = get_post_meta($job_id, 'required_experience', true);\n    $company_id = get_post_field('post_author', $job_id);\n    $company_culture = get_user_meta($company_id, 'culture_answers', true) ?: array();\n    \n    \/\/ 1. Skills Match (35% weight)\n    $scores['skills_match'] = jobmatch_calculate_skills_overlap($dev_skills, $job_skills);\n    \n    \/\/ 2. Salary Alignment (25% weight)\n    $scores['salary_alignment'] = jobmatch_calculate_salary_alignment($dev_salary, $job_salary_min, $job_salary_max);\n    \n    \/\/ 3. Location Proximity (20% weight)\n    $scores['location_proximity'] = jobmatch_calculate_location_score($dev_location, $job_postal, $job_remote, $dev_work_pref);\n    \n    \/\/ 4. Culture Fit (15% weight)\n    $scores['culture_fit'] = jobmatch_calculate_culture_alignment($dev_culture, $company_culture);\n    \n    \/\/ 5. Experience Level (5% weight)\n    $scores['experience_level'] = jobmatch_calculate_experience_match($dev_experience, $job_experience);\n    \n    return $scores;\n}\n\n\/\/ Calculate match between developer and company (for company browsing)\nfunction jobmatch_calculate_company_match($developer_id, $company_id, $weights) {\n    $scores = array();\n    \n    \/\/ Get developer data\n    $dev_skills = get_user_meta($developer_id, 'tech_skills', true) ?: array();\n    $dev_salary = intval(get_user_meta($developer_id, 'salary_expectation', true));\n    $dev_location = get_user_meta($developer_id, 'postal_code', true);\n    $dev_culture = get_user_meta($developer_id, 'culture_answers', true) ?: array();\n    $dev_experience = get_user_meta($developer_id, 'experience_level', true);\n    $dev_work_pref = get_user_meta($developer_id, 'work_preference', true);\n    \n    \/\/ Get company data\n    $company_location = get_user_meta($company_id, 'postal_code', true);\n    $company_culture = get_user_meta($company_id, 'culture_answers', true) ?: array();\n    $company_industry = get_user_meta($company_id, 'industry', true);\n    \n    \/\/ Get company's typical requirements from their active jobs\n    $company_jobs = get_posts(array(\n        'post_type' => 'jobs',\n        'author' => $company_id,\n        'post_status' => 'publish',\n        'numberposts' => -1\n    ));\n    \n    $company_skills = array();\n    $salary_ranges = array();\n    foreach ($company_jobs as $job) {\n        $job_skills = wp_get_post_terms($job->ID, 'tech_stack', array('fields' => 'names'));\n        $company_skills = array_merge($company_skills, $job_skills);\n        \n        $salary_min = intval(get_post_meta($job->ID, 'salary_min', true));\n        $salary_max = intval(get_post_meta($job->ID, 'salary_max', true));\n        if ($salary_min && $salary_max) {\n            $salary_ranges[] = array('min' => $salary_min, 'max' => $salary_max);\n        }\n    }\n    \n    $company_skills = array_unique($company_skills);\n    \n    \/\/ Calculate average salary range\n    $avg_salary_min = 0;\n    $avg_salary_max = 0;\n    if (!empty($salary_ranges)) {\n        $avg_salary_min = array_sum(array_column($salary_ranges, 'min')) \/ count($salary_ranges);\n        $avg_salary_max = array_sum(array_column($salary_ranges, 'max')) \/ count($salary_ranges);\n    }\n    \n    \/\/ 1. Skills Match\n    $scores['skills_match'] = jobmatch_calculate_skills_overlap($dev_skills, $company_skills);\n    \n    \/\/ 2. Salary Alignment\n    $scores['salary_alignment'] = $avg_salary_min ? jobmatch_calculate_salary_alignment($dev_salary, $avg_salary_min, $avg_salary_max) : 50;\n    \n    \/\/ 3. Location Proximity\n    $scores['location_proximity'] = jobmatch_calculate_location_score($dev_location, $company_location, false, $dev_work_pref);\n    \n    \/\/ 4. Culture Fit\n    $scores['culture_fit'] = jobmatch_calculate_culture_alignment($dev_culture, $company_culture);\n    \n    \/\/ 5. Experience Level (use industry standards)\n    $scores['experience_level'] = 75; \/\/ Default good match for company browsing\n    \n    return $scores;\n}\n\n\/\/ Calculate skills overlap percentage\nfunction jobmatch_calculate_skills_overlap($dev_skills, $job_skills) {\n    if (empty($dev_skills) || empty($job_skills)) {\n        return 0;\n    }\n    \n    \/\/ Convert to lowercase for comparison\n    $dev_skills_lower = array_map('strtolower', $dev_skills);\n    $job_skills_lower = array_map('strtolower', $job_skills);\n    \n    \/\/ Find intersection\n    $overlap = array_intersect($dev_skills_lower, $job_skills_lower);\n    $overlap_count = count($overlap);\n    \n    \/\/ Calculate percentage based on job requirements\n    $required_count = count($job_skills_lower);\n    $overlap_percentage = ($overlap_count \/ $required_count) * 100;\n    \n    \/\/ Bonus for having more skills than required\n    $extra_skills = count($dev_skills_lower) - $overlap_count;\n    if ($extra_skills > 0) {\n        $overlap_percentage += min($extra_skills * 2, 10); \/\/ Max 10% bonus\n    }\n    \n    return min($overlap_percentage, 100);\n}\n\n\/\/ Calculate salary alignment score\nfunction jobmatch_calculate_salary_alignment($dev_salary, $job_min, $job_max) {\n    if (!$dev_salary || (!$job_min && !$job_max)) {\n        return 50; \/\/ Default neutral score\n    }\n    \n    \/\/ If no range provided, assume job_min is the offered salary\n    if (!$job_max) {\n        $job_max = $job_min;\n    }\n    \n    $job_mid = ($job_min + $job_max) \/ 2;\n    \n    \/\/ Perfect match if within range\n    if ($dev_salary >= $job_min && $dev_salary <= $job_max) {\n        return 100;\n    }\n    \n    \/\/ Calculate distance from range\n    if ($dev_salary < $job_min) {\n        \/\/ Developer expects less than offered - good for company\n        $difference = $job_min - $dev_salary;\n        $percentage_diff = $difference \/ $job_min;\n        return max(60, 100 - ($percentage_diff * 50));\n    } else {\n        \/\/ Developer expects more than offered\n        $difference = $dev_salary - $job_max;\n        $percentage_diff = $difference \/ $job_max;\n        return max(0, 100 - ($percentage_diff * 100));\n    }\n}\n\n\/\/ Calculate location proximity score\nfunction jobmatch_calculate_location_score($dev_postal, $job_postal, $is_remote, $dev_work_pref) {\n    \/\/ Remote work preference handling\n    if ($dev_work_pref === 'remote' && $is_remote) {\n        return 100; \/\/ Perfect match for remote work\n    }\n    \n    if ($dev_work_pref === 'remote' && !$is_remote) {\n        return 20; \/\/ Low score for remote preference but on-site job\n    }\n    \n    if ($is_remote) {\n        return 90; \/\/ Remote jobs are generally good\n    }\n    \n    if (!$dev_postal || !$job_postal) {\n        return 50; \/\/ Default score if location data missing\n    }\n    \n    \/\/ Get coordinates for both locations\n    $dev_coords = jobmatch_get_postal_coordinates($dev_postal);\n    $job_coords = jobmatch_get_postal_coordinates($job_postal);\n    \n    \/\/ Calculate distance\n    $distance = jobmatch_calculate_distance(\n        $dev_coords['lat'], $dev_coords['lng'],\n        $job_coords['lat'], $job_coords['lng']\n    );\n    \n    \/\/ Score based on distance\n    if ($distance <= 5) return 100;\n    if ($distance <= 10) return 90;\n    if ($distance <= 20) return 80;\n    if ($distance <= 30) return 70;\n    if ($distance <= 50) return 60;\n    if ($distance <= 100) return 40;\n    if ($distance <= 200) return 20;\n    return 10;\n}\n\n\/\/ Calculate culture alignment score\nfunction jobmatch_calculate_culture_alignment($dev_answers, $company_answers) {\n    if (empty($dev_answers) || empty($company_answers)) {\n        return 60; \/\/ Default neutral score\n    }\n    \n    $total_questions = 0;\n    $matching_answers = 0;\n    \n    \/\/ Culture questionnaire mapping\n    $culture_questions = jobmatch_get_culture_questions();\n    \n    foreach ($culture_questions as $question_id => $question_data) {\n        if (isset($dev_answers[$question_id]) && isset($company_answers[$question_id])) {\n            $total_questions++;\n            \n            $dev_answer = $dev_answers[$question_id];\n            $company_answer = $company_answers[$question_id];\n            \n            \/\/ Different scoring based on question type\n            if ($question_data['type'] === 'scale') {\n                \/\/ For scale questions, calculate proximity\n                $difference = abs($dev_answer - $company_answer);\n                $max_difference = $question_data['max'] - $question_data['min'];\n                $proximity = 1 - ($difference \/ $max_difference);\n                $matching_answers += $proximity;\n            } else {\n                \/\/ For multiple choice, exact match\n                if ($dev_answer === $company_answer) {\n                    $matching_answers++;\n                }\n            }\n        }\n    }\n    \n    if ($total_questions === 0) {\n        return 60;\n    }\n    \n    return ($matching_answers \/ $total_questions) * 100;\n}\n\n\/\/ Calculate experience level match\nfunction jobmatch_calculate_experience_match($dev_experience, $job_experience) {\n    $experience_levels = array(\n        'junior' => 1,\n        'mid' => 2, \n        'senior' => 3,\n        'lead' => 4\n    );\n    \n    $dev_level = $experience_levels[$dev_experience] ?? 2;\n    $job_level = $experience_levels[$job_experience] ?? 2;\n    \n    if ($dev_level === $job_level) {\n        return 100;\n    }\n    \n    $difference = abs($dev_level - $job_level);\n    \n    if ($difference === 1) {\n        return 80;\n    } elseif ($difference === 2) {\n        return 60;\n    } else {\n        return 40;\n    }\n}\n\n\/\/ Get culture questionnaire structure\nfunction jobmatch_get_culture_questions() {\n    return array(\n        'work_life_balance' => array(\n            'question' => 'How important is work-life balance?',\n            'type' => 'scale',\n            'min' => 1,\n            'max' => 5,\n            'labels' => array(1 => 'Not important', 5 => 'Very important')\n        ),\n        'team_collaboration' => array(\n            'question' => 'Preferred collaboration style?',\n            'type' => 'choice',\n            'options' => array(\n                'independent' => 'Independent work',\n                'small_team' => 'Small team collaboration',\n                'large_team' => 'Large team projects',\n                'mixed' => 'Mixed approach'\n            )\n        ),\n        'innovation_vs_stability' => array(\n            'question' => 'Innovation vs Stability preference?',\n            'type' => 'scale',\n            'min' => 1,\n            'max' => 5,\n            'labels' => array(1 => 'Stability focused', 5 => 'Innovation focused')\n        ),\n        'feedback_frequency' => array(\n            'question' => 'Preferred feedback frequency?',\n            'type' => 'choice',\n            'options' => array(\n                'daily' => 'Daily check-ins',\n                'weekly' => 'Weekly reviews',\n                'monthly' => 'Monthly evaluations',\n                'quarterly' => 'Quarterly reviews'\n            )\n        ),\n        'career_growth' => array(\n            'question' => 'How important is rapid career advancement?',\n            'type' => 'scale',\n            'min' => 1,\n            'max' => 5,\n            'labels' => array(1 => 'Not important', 5 => 'Very important')\n        ),\n        'company_size_preference' => array(\n            'question' => 'Preferred company environment?',\n            'type' => 'choice',\n            'options' => array(\n                'startup' => 'Startup (fast-paced, flexible)',\n                'scale_up' => 'Scale-up (growing, structured)',\n                'enterprise' => 'Enterprise (established, stable)',\n                'no_preference' => 'No preference'\n            )\n        )\n    );\n}\n\n\/\/ Batch calculate match scores for multiple targets\nfunction jobmatch_batch_calculate_scores($user_id, $target_ids, $target_type = 'job') {\n    $results = array();\n    \n    foreach ($target_ids as $target_id) {\n        $score_data = jobmatch_calculate_match_score($user_id, $target_id, $target_type);\n        $results[$target_id] = $score_data;\n        \n        \/\/ Small delay to prevent server overload\n        if (count($target_ids) > 10) {\n            usleep(50000); \/\/ 0.05 seconds\n        }\n    }\n    \n    return $results;\n}\n\n\/\/ Get top matches for a user\nfunction jobmatch_get_top_matches($user_id, $target_type = 'job', $limit = 10, $min_score = 50) {\n    global $wpdb;\n    \n    $user_role = get_user_meta($user_id, 'user_role', true);\n    \n    \/\/ Determine what type of targets to find\n    if ($user_role === 'developer') {\n        $target_type = 'job';\n        $target_table = $wpdb->posts;\n        $target_where = \"p.post_type = 'jobs' AND p.post_status = 'publish'\";\n    } else {\n        $target_type = 'developer';\n        $target_table = $wpdb->users;\n        $target_where = \"u.ID IN (SELECT user_id FROM {$wpdb->usermeta} WHERE meta_key = 'user_role' AND meta_value = 'developer')\";\n    }\n    \n    \/\/ Get cached scores\n    $scores_table = $wpdb->prefix . 'match_scores';\n    \n    if ($user_role === 'developer') {\n        $results = $wpdb->get_results($wpdb->prepare(\"\n            SELECT ms.*, p.post_title, p.post_author\n            FROM {$scores_table} ms\n            JOIN {$wpdb->posts} p ON ms.target_id = p.ID\n            WHERE ms.user_id = %d \n            AND ms.target_type = %s\n            AND ms.score >= %d\n            AND p.post_type = 'jobs'\n            AND p.post_status = 'publish'\n            ORDER BY ms.score DESC, ms.updated_at DESC\n            LIMIT %d\n        \", $user_id, $target_type, $min_score, $limit));\n    } else {\n        $results = $wpdb->get_results($wpdb->prepare(\"\n            SELECT ms.*, u.display_name, u.user_email\n            FROM {$scores_table} ms\n            JOIN {$wpdb->users} u ON ms.target_id = u.ID\n            JOIN {$wpdb->usermeta} um ON u.ID = um.user_id\n            WHERE ms.user_id = %d \n            AND ms.target_type = %s\n            AND ms.score >= %d\n            AND um.meta_key = 'user_role'\n            AND um.meta_value = 'developer'\n            ORDER BY ms.score DESC, ms.updated_at DESC\n            LIMIT %d\n        \", $user_id, $target_type, $min_score, $limit));\n    }\n    \n    return $results;\n}\n\n\/\/ Recalculate all match scores for a user (when profile changes)\nfunction jobmatch_recalculate_user_scores($user_id) {\n    global $wpdb;\n    \n    $user_role = get_user_meta($user_id, 'user_role', true);\n    \n    if ($user_role === 'developer') {\n        \/\/ Recalculate scores for all active jobs\n        $jobs = get_posts(array(\n            'post_type' => 'jobs',\n            'post_status' => 'publish',\n            'numberposts' => -1,\n            'fields' => 'ids'\n        ));\n        \n        foreach ($jobs as $job_id) {\n            jobmatch_calculate_match_score($user_id, $job_id, 'job');\n        }\n        \n    } else {\n        \/\/ Recalculate scores for all active developers\n        $developers = get_users(array(\n            'meta_key' => 'user_role',\n            'meta_value' => 'developer',\n            'fields' => 'ID'\n        ));\n        \n        foreach ($developers as $developer_id) {\n            jobmatch_calculate_match_score($developer_id, $user_id, 'company');\n        }\n    }\n}\n\n\/\/ Schedule match score calculations\nadd_action('wp', 'jobmatch_schedule_score_calculations');\n\nfunction jobmatch_schedule_score_calculations() {\n    if (!wp_next_scheduled('jobmatch_calculate_daily_scores')) {\n        wp_schedule_event(time(), 'daily', 'jobmatch_calculate_daily_scores');\n    }\n}\n\n\/\/ Daily score calculation cron job\nadd_action('jobmatch_calculate_daily_scores', 'jobmatch_daily_score_calculation');\n\nfunction jobmatch_daily_score_calculation() {\n    global $wpdb;\n    \n    \/\/ Get all active users\n    $active_users = get_users(array(\n        'meta_query' => array(\n            array(\n                'key' => 'user_role',\n                'value' => array('developer', 'company'),\n                'compare' => 'IN'\n            ),\n            array(\n                'key' => 'last_login',\n                'value' => date('Y-m-d H:i:s', strtotime('-30 days')),\n                'compare' => '>'\n            )\n        ),\n        'fields' => 'ID'\n    ));\n    \n    \/\/ Batch process to avoid timeouts\n    $batch_size = 50;\n    $total_users = count($active_users);\n    \n    for ($i = 0; $i < $total_users; $i += $batch_size) {\n        $batch = array_slice($active_users, $i, $batch_size);\n        \n        foreach ($batch as $user_id) {\n            \/\/ Only recalculate if scores are older than 24 hours\n            $last_calculation = get_user_meta($user_id, 'last_score_calculation', true);\n            if (!$last_calculation || strtotime($last_calculation) < strtotime('-24 hours')) {\n                jobmatch_recalculate_user_scores($user_id);\n                update_user_meta($user_id, 'last_score_calculation', current_time('mysql'));\n            }\n        }\n        \n        \/\/ Sleep between batches to prevent server overload\n        sleep(2);\n    }\n    \n    \/\/ Clean up old scores\n    $wpdb->query(\"DELETE FROM {$wpdb->prefix}match_scores WHERE created_at < DATE_SUB(NOW(), INTERVAL 90 DAY)\");\n}\n\n\/\/ Hook to recalculate scores when user profile is updated\nadd_action('updated_user_meta', 'jobmatch_on_profile_update', 10, 4);\n\nfunction jobmatch_on_profile_update($meta_id, $user_id, $meta_key, $meta_value) {\n    \/\/ Only recalculate for relevant profile changes\n    $relevant_keys = array(\n        'tech_skills', 'salary_expectation', 'work_preference', \n        'experience_level', 'postal_code', 'culture_answers',\n        'industry', 'company_size'\n    );\n    \n    if (in_array($meta_key, $relevant_keys)) {\n        \/\/ Schedule recalculation (don't do it immediately to avoid multiple recalcs)\n        wp_schedule_single_event(time() + 300, 'jobmatch_recalc_user_scores', array($user_id));\n    }\n}\n\nadd_action('jobmatch_recalc_user_scores', 'jobmatch_recalculate_user_scores');\n\n\/\/ Hook to calculate scores when new job is posted\nadd_action('transition_post_status', 'jobmatch_on_job_published', 10, 3);\n\nfunction jobmatch_on_job_published($new_status, $old_status, $post) {\n    if ($post->post_type === 'jobs' && $new_status === 'publish' && $old_status !== 'publish') {\n        \/\/ Calculate match scores for all developers\n        $developers = get_users(array(\n            'meta_key' => 'user_role',\n            'meta_value' => 'developer',\n            'fields' => 'ID'\n        ));\n        \n        \/\/ Schedule batch calculation to avoid timeout\n        wp_schedule_single_event(time() + 60, 'jobmatch_calc_job_scores', array($post->ID, $developers));\n    }\n}\n\nadd_action('jobmatch_calc_job_scores', 'jobmatch_calculate_job_scores_batch');\n\nfunction jobmatch_calculate_job_scores_batch($job_id, $developer_ids) {\n    foreach ($developer_ids as $developer_id) {\n        jobmatch_calculate_match_score($developer_id, $job_id, 'job');\n        \n        \/\/ Send notification if high match\n        $score = jobmatch_get_match_score($developer_id, $job_id, 'job');\n        if ($score && $score->score >= 80) {\n            $job_title = get_the_title($job_id);\n            $company_id = get_post_field('post_author', $job_id);\n            $company_name = jobmatch_get_display_name($company_id, $developer_id);\n            \n            jobmatch_add_notification(\n                $developer_id,\n                'high_match_job',\n                'New High Match Job!',\n                \"A new job '{$job_title}' at {$company_name} is a {$score->score}% match for you!\",\n                get_permalink($job_id)\n            );\n        }\n    }\n}\n\n\/\/ AJAX handler for on-demand score calculation\nadd_action('wp_ajax_calculate_match_score', 'jobmatch_ajax_calculate_score');\n\nfunction jobmatch_ajax_calculate_score() {\n    check_ajax_referer('jobmatch_nonce', 'nonce');\n    \n    $user_id = intval($_POST['user_id']);\n    $target_id = intval($_POST['target_id']);\n    $target_type = sanitize_text_field($_POST['target_type']);\n    \n    if (!$user_id || !$target_id || !in_array($target_type, array('job', 'developer', 'company'))) {\n        wp_send_json_error('Invalid parameters');\n    }\n    \n    $score_data = jobmatch_calculate_match_score($user_id, $target_id, $target_type);\n    \n    wp_send_json_success($score_data);\n}\n\n\/\/ Get match score explanation for frontend display\nfunction jobmatch_get_score_explanation($user_id, $target_id, $target_type) {\n    $score = jobmatch_get_match_score($user_id, $target_id, $target_type);\n    \n    if (!$score || !$score->factors) {\n        return 'Score not calculated yet.';\n    }\n    \n    $factors = maybe_unserialize($score->factors);\n    $weights = jobmatch_get_matchmaking_weights();\n    \n    $explanations = array();\n    \n    foreach ($factors as $factor => $factor_score) {\n        $weight = $weights[$factor] ?? 0;\n        $contribution = ($factor_score * $weight \/ 100);\n        \n        $factor_names = array(\n            'skills_match' => 'Technical Skills',\n            'salary_alignment' => 'Salary Match',\n            'location_proximity' => 'Location',\n            'culture_fit' => 'Culture Fit',\n            'experience_level' => 'Experience Level'\n        );\n        \n        $factor_name = $factor_names[$factor] ?? ucfirst(str_replace('_', ' ', $factor));\n        $explanations[] = sprintf('%s: %.1f%% (%.1f points)', $factor_name, $factor_score, $contribution);\n    }\n    \n    return implode('<br>', $explanations);\n}\n\n\/\/ Shortcode to display match score with explanation\nadd_shortcode('jobmatch_score', 'jobmatch_score_shortcode');\n\nfunction jobmatch_score_shortcode($atts) {\n    $atts = shortcode_atts(array(\n        'user_id' => get_current_user_id(),\n        'target_id' => 0,\n        'target_type' => 'job',\n        'show_details' => false\n    ), $atts);\n    \n    if (!$atts['target_id']) {\n        return 'Target ID required';\n    }\n    \n    $score = jobmatch_get_match_score($atts['user_id'], $atts['target_id'], $atts['target_type']);\n    \n    if (!$score) {\n        return '<span class=\"match-score calculating\">Calculating...<\/span>';\n    }\n    \n    $score_class = '';\n    if ($score->score >= 90) $score_class = 'excellent';\n    elseif ($score->score >= 80) $score_class = 'very-good';\n    elseif ($score->score >= 70) $score_class = 'good';\n    elseif ($score->score >= 60) $score_class = 'fair';\n    else $score_class = 'poor';\n    \n    $html = sprintf('<span class=\"match-score %s\">%s%%<\/span>', $score_class, $score->score);\n    \n    if ($atts['show_details']) {\n        $explanation = jobmatch_get_score_explanation($atts['user_id'], $atts['target_id'], $atts['target_type']);\n        $html .= '<div class=\"score-details\">' . $explanation . '<\/div>';\n    }\n    \n    return $html;\n}\n\n\/\/ Add CSS for match scores\nadd_action('wp_head', 'jobmatch_score_styles');\n\nfunction jobmatch_score_styles() {\n    ?>\n    <style>\n    .match-score {\n        padding: 6px 12px;\n        border-radius: 20px;\n        font-weight: bold;\n        font-size: 0.9rem;\n        color: white;\n        display: inline-block;\n    }\n    \n    .match-score.excellent { background: linear-gradient(135deg, #11998e, #38ef7d); }\n    .match-score.very-good { background: linear-gradient(135deg, #667eea, #764ba2); }\n    .match-score.good { background: linear-gradient(135deg, #f093fb, #f5576c); }\n    .match-score.fair { background: linear-gradient(135deg, #ffecd2, #fcb69f); color: #333; }\n    .match-score.poor { background: linear-gradient(135deg, #d7d2cc, #304352); }\n    .match-score.calculating { background: #6c757d; animation: pulse 2s infinite; }\n    \n    @keyframes pulse {\n        0% { opacity: 1; }\n        50% { opacity: 0.5; }\n        100% { opacity: 1; }\n    }\n    \n    .score-details {\n        background: #f8f9fa;\n        padding: 10px;\n        margin-top: 10px;\n        border-radius: 8px;\n        font-size: 0.85rem;\n        border-left: 4px solid #007cba;\n    }\n    <\/style>\n    <?php\n}","active":true,"modified":"2025-09-22 20:15:36","revision":"1"}]}