{"generator":"Code Snippets v3.7.0","date_created":"2025-09-26 10:48","snippets":[{"id":31,"name":"safest approach - Geocoding Function","code":"\n\/**\n * Geocoding Function for Postal Codes\n * Add this as a new Code Snippet\n *\/\n\n\/\/ Check if function already exists to avoid conflicts\nif (!function_exists('jobmatch_geocode_postal')) {\n    \n    function jobmatch_geocode_postal($postal_code, $country = 'DE') {\n        global $wpdb;\n        $geo_table = $wpdb->prefix . 'geo_locations';\n        \n        \/\/ Clean the postal code\n        $postal_code = trim($postal_code);\n        if (empty($postal_code)) {\n            return false;\n        }\n        \n        \/\/ Check if already cached in database\n        $cached = $wpdb->get_row($wpdb->prepare(\n            \"SELECT * FROM $geo_table WHERE postal_code = %s\",\n            $postal_code\n        ));\n        \n        if ($cached) {\n            return array(\n                'lat' => floatval($cached->latitude), \n                'lng' => floatval($cached->longitude)\n            );\n        }\n        \n        \/\/ Use Nominatim API (free OpenStreetMap service)\n        $url = \"https:\/\/nominatim.openstreetmap.org\/search?\" . http_build_query(array(\n            'postalcode' => $postal_code,\n            'country' => $country,\n            'format' => 'json',\n            'limit' => 1\n        ));\n        \n        $response = wp_remote_get($url, array(\n            'timeout' => 10,\n            'headers' => array(\n                'User-Agent' => 'JobMatch WordPress Plugin',\n                'Referer' => home_url()\n            )\n        ));\n        \n        if (!is_wp_error($response)) {\n            $data = json_decode(wp_remote_retrieve_body($response), true);\n            \n            if (!empty($data[0]['lat']) && !empty($data[0]['lon'])) {\n                \/\/ Cache the result\n                $wpdb->insert($geo_table, array(\n                    'postal_code' => $postal_code,\n                    'latitude' => $data[0]['lat'],\n                    'longitude' => $data[0]['lon'],\n                    'country' => $country,\n                    'created_at' => current_time('mysql')\n                ));\n                \n                return array(\n                    'lat' => floatval($data[0]['lat']), \n                    'lng' => floatval($data[0]['lon'])\n                );\n            }\n        }\n        \n        \/\/ Fallback for German postal codes if API fails\n        if ($country === 'DE') {\n            $regions = array(\n                '10' => array('lat' => 52.520, 'lng' => 13.405), \/\/ Berlin\n                '20' => array('lat' => 53.551, 'lng' => 9.994),  \/\/ Hamburg\n                '30' => array('lat' => 52.376, 'lng' => 9.732),  \/\/ Hannover\n                '40' => array('lat' => 51.228, 'lng' => 6.774),  \/\/ D\u00fcsseldorf\n                '50' => array('lat' => 50.938, 'lng' => 6.957),  \/\/ K\u00f6ln\n                '60' => array('lat' => 50.110, 'lng' => 8.682),  \/\/ Frankfurt\n                '70' => array('lat' => 48.776, 'lng' => 9.182),  \/\/ Stuttgart\n                '80' => array('lat' => 48.135, 'lng' => 11.582), \/\/ M\u00fcnchen\n                '90' => array('lat' => 49.453, 'lng' => 11.078), \/\/ N\u00fcrnberg\n            );\n            \n            $prefix = substr($postal_code, 0, 2);\n            if (isset($regions[$prefix])) {\n                \/\/ Cache the fallback\n                $wpdb->insert($geo_table, array(\n                    'postal_code' => $postal_code,\n                    'latitude' => $regions[$prefix]['lat'],\n                    'longitude' => $regions[$prefix]['lng'],\n                    'country' => $country,\n                    'created_at' => current_time('mysql')\n                ));\n                \n                return $regions[$prefix];\n            }\n        }\n        \n        return false;\n    }\n}\n\n\/\/ Also add the distance calculation if missing\nif (!function_exists('jobmatch_calculate_distance')) {\n    \n    function jobmatch_calculate_distance($lat1, $lon1, $lat2, $lon2) {\n        $earth_radius = 6371; \/\/ km\n        \n        $lat1 = deg2rad($lat1);\n        $lat2 = deg2rad($lat2);\n        $lon1 = deg2rad($lon1);\n        $lon2 = deg2rad($lon2);\n        \n        $dlat = $lat2 - $lat1;\n        $dlon = $lon2 - $lon1;\n        \n        $a = sin($dlat\/2) * sin($dlat\/2) + \n             cos($lat1) * cos($lat2) * \n             sin($dlon\/2) * sin($dlon\/2);\n        \n        $c = 2 * atan2(sqrt($a), sqrt(1-$a));\n        \n        return $earth_radius * $c;\n    }\n}","active":true,"modified":"2025-09-24 20:25:59","revision":"1"}]}