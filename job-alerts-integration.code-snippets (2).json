{"generator":"Code Snippets v3.7.0","date_created":"2025-09-26 10:48","snippets":[{"id":26,"name":"Job Alerts Integration","code":"\n\/**\n * Job Alerts Integration - Fixed Version\n * This properly hooks into WordPress job publishing\n *\/\n\n\/\/ Use the correct WordPress hook for job publishing\nadd_action('publish_jobs', 'jobmatch_notify_matched_developers', 10, 2);\n\/\/ Also hook into status transitions for better coverage\nadd_action('transition_post_status', 'jobmatch_alert_matched_developers', 10, 3);\n\n\/\/ Original function with correct parameters\nfunction jobmatch_notify_matched_developers($ID, $post) {\n    if ($post->post_type !== 'jobs') {\n        return;\n    }\n    \n    $company_id = $post->post_author;\n    \n    \/\/ Query your matches using the correct approach\n    global $wpdb;\n    \n    \/\/ First check if match_history table exists, otherwise use post meta\n    $table_exists = $wpdb->get_var(\"SHOW TABLES LIKE '{$wpdb->prefix}match_history'\");\n    \n    if ($table_exists) {\n        \/\/ Use the match_history table\n        $matches_table = $wpdb->prefix . 'match_history';\n        $matched_developers = $wpdb->get_col($wpdb->prepare(\n            \"SELECT DISTINCT developer_id FROM $matches_table \n             WHERE company_id = %d \n             AND status IN ('mutual', 'revealed', 'chatting')\",\n            $company_id\n        ));\n    } else {\n        \/\/ Fallback: Query from matches post type\n        $matched_developers = $wpdb->get_col($wpdb->prepare(\"\n            SELECT DISTINCT pm_dev.meta_value as developer_id\n            FROM {$wpdb->posts} p\n            LEFT JOIN {$wpdb->postmeta} pm_dev ON p.ID = pm_dev.post_id AND pm_dev.meta_key = 'developer_id'\n            LEFT JOIN {$wpdb->postmeta} pm_comp ON p.ID = pm_comp.post_id AND pm_comp.meta_key = 'company_id'\n            LEFT JOIN {$wpdb->postmeta} pm_status ON p.ID = pm_status.post_id AND pm_status.meta_key = 'match_status'\n            WHERE p.post_type = 'matches'\n            AND p.post_status = 'publish'\n            AND pm_comp.meta_value = %s\n            AND pm_status.meta_value IN ('mutual', 'revealed', 'chatting')\n        \", $company_id));\n    }\n    \n    if (empty($matched_developers)) {\n        return;\n    }\n    \n    foreach ($matched_developers as $dev_id) {\n        \/\/ Check notification preferences\n        $preferences = get_user_meta($dev_id, 'notification_preferences', true);\n        if (isset($preferences['job_alerts']) && $preferences['job_alerts'] === 'disabled') {\n            continue;\n        }\n        \n        \/\/ Use your existing notification creation function\n        if (function_exists('jobmatch_create_notification')) {\n            jobmatch_create_notification(\n                $dev_id,\n                'job_alert',\n                'New Job from Matched Company',\n                sprintf('A company you matched with posted: %s', get_the_title($ID)),\n                array('job_id' => $ID, 'company_id' => $company_id)\n            );\n        }\n        \n        \/\/ Also trigger your existing email notification\n        do_action('jobmatch_send_email_notification', $dev_id, 'job_alert', array(\n            'job_title' => get_the_title($ID),\n            'job_url' => get_permalink($ID)\n        ));\n    }\n}\n\n\/\/ Additional handler for transition_post_status hook\nfunction jobmatch_alert_matched_developers($new_status, $old_status, $post) {\n    \/\/ Only trigger when publishing a job for the first time\n    if ($post->post_type !== 'jobs' || $new_status !== 'publish' || $old_status === 'publish') {\n        return;\n    }\n    \n    \/\/ Call the main notification function\n    jobmatch_notify_matched_developers($post->ID, $post);\n}\n\n\/\/ Also add high-match job alerts (80%+ match score)\nadd_action('publish_jobs', 'jobmatch_alert_high_match_jobs', 10, 2);\n\nfunction jobmatch_alert_high_match_jobs($ID, $post) {\n    if ($post->post_type !== 'jobs') {\n        return;\n    }\n    \n    \/\/ Get all active developers\n    $developers = get_users(array(\n        'meta_key' => 'user_role',\n        'meta_value' => 'developer',\n        'number' => 100 \/\/ Limit for performance\n    ));\n    \n    $high_match_threshold = get_option('jobmatch_high_threshold', 80);\n    $company_id = $post->post_author;\n    \n    foreach ($developers as $developer) {\n        \/\/ Skip if already notified as matched company\n        $already_notified = get_transient('job_alert_' . $developer->ID . '_' . $ID);\n        if ($already_notified) {\n            continue;\n        }\n        \n        \/\/ Check if this is a matched developer (to avoid duplicate notifications)\n        $is_matched = get_user_meta($developer->ID, 'matched_with_' . $company_id, true);\n        if ($is_matched) {\n            continue; \/\/ Already handled by matched company alerts\n        }\n        \n        \/\/ Calculate match score\n        if (function_exists('jobmatch_calculate_match_score')) {\n            $match_score = jobmatch_calculate_match_score($developer->ID, $ID, 'job');\n            \n            \/\/ Only alert for high matches\n            if ($match_score['score'] >= $high_match_threshold) {\n                \/\/ Check notification preferences\n                $preferences = get_user_meta($developer->ID, 'notification_preferences', true);\n                if (isset($preferences['job_alerts']) && $preferences['job_alerts'] === 'disabled') {\n                    continue;\n                }\n                \n                \/\/ Create high-match notification\n                if (function_exists('jobmatch_create_notification')) {\n                    jobmatch_create_notification(\n                        $developer->ID,\n                        'high_match_job',\n                        sprintf('\ud83c\udfaf %d%% Match: New Job Alert', $match_score['score']),\n                        sprintf(\n                            'New job \"%s\" matches %d%% with your profile! This is a great opportunity based on your skills.',\n                            get_the_title($ID),\n                            $match_score['score']\n                        ),\n                        array(\n                            'job_id' => $ID,\n                            'match_score' => $match_score['score']\n                        )\n                    );\n                }\n                \n                \/\/ Set transient to prevent duplicate alerts\n                set_transient('job_alert_' . $developer->ID . '_' . $ID, true, DAY_IN_SECONDS);\n            }\n        }\n    }\n}","active":true,"modified":"2025-09-24 21:18:03","revision":"1"}]}