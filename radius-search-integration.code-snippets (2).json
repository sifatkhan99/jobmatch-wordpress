{"generator":"Code Snippets v3.7.0","date_created":"2025-09-26 10:48","snippets":[{"id":32,"name":"Radius Search Integration","code":"\/**\n * Radius Search Integration\n * Add this as a new Code Snippet\n *\/\n\n\/\/ Hook into your existing browse queries to add radius filtering\nadd_filter('pre_get_posts', 'jobmatch_apply_radius_filter');\n\nfunction jobmatch_apply_radius_filter($query) {\n    \/\/ Only apply on frontend job\/developer queries\n    if (is_admin() || !$query->is_main_query()) {\n        return;\n    }\n    \n    \/\/ Check if radius parameter exists\n    if (isset($_GET['radius']) || isset($_POST['radius'])) {\n        $radius = isset($_GET['radius']) ? $_GET['radius'] : $_POST['radius'];\n        $user_id = get_current_user_id();\n        \n        if (!$user_id) return;\n        \n        \/\/ Get user's coordinates\n        $user_coords = get_user_meta($user_id, 'lat_lng', true);\n        \n        \/\/ If no coordinates, try to geocode their postal code\n        if (!$user_coords) {\n            $postal_code = get_user_meta($user_id, 'postal_code', true);\n            if ($postal_code && function_exists('jobmatch_geocode_postal')) {\n                $coords = jobmatch_geocode_postal($postal_code);\n                if ($coords) {\n                    $user_coords = $coords['lat'] . ',' . $coords['lng'];\n                    update_user_meta($user_id, 'lat_lng', $user_coords);\n                }\n            }\n        }\n        \n        if ($user_coords) {\n            list($user_lat, $user_lng) = explode(',', $user_coords);\n            \n            \/\/ Handle special cases\n            if ($radius === 'remote') {\n                \/\/ Only show remote jobs\n                $query->set('meta_key', 'work_preference');\n                $query->set('meta_value', 'remote');\n            } elseif ($radius === 'germany') {\n                \/\/ Show all German jobs (no distance filter)\n                return;\n            } elseif (is_numeric($radius)) {\n                \/\/ Apply distance filter\n                jobmatch_filter_by_distance($query, $user_lat, $user_lng, intval($radius));\n            }\n        }\n    }\n}\n\nfunction jobmatch_filter_by_distance($query, $user_lat, $user_lng, $radius_km) {\n    global $wpdb;\n    \n    if ($query->get('post_type') === 'jobs') {\n        \/\/ For jobs, we need to filter by company location\n        $sql = \"\n            SELECT DISTINCT p.ID \n            FROM {$wpdb->posts} p\n            INNER JOIN {$wpdb->usermeta} um ON p.post_author = um.user_id\n            WHERE p.post_type = 'jobs' \n            AND p.post_status = 'publish'\n            AND um.meta_key = 'lat_lng'\n            AND (\n                6371 * acos(\n                    cos(radians(%f)) * \n                    cos(radians(SUBSTRING_INDEX(um.meta_value, ',', 1))) * \n                    cos(radians(SUBSTRING_INDEX(um.meta_value, ',', -1)) - radians(%f)) + \n                    sin(radians(%f)) * \n                    sin(radians(SUBSTRING_INDEX(um.meta_value, ',', 1)))\n                )\n            ) <= %d\n        \";\n        \n        $job_ids = $wpdb->get_col($wpdb->prepare($sql, $user_lat, $user_lng, $user_lat, $radius_km));\n        \n        if (!empty($job_ids)) {\n            $query->set('post__in', $job_ids);\n        } else {\n            \/\/ No jobs within radius\n            $query->set('post__in', array(0));\n        }\n    }\n}\n\n\/\/ Add radius options to your existing filter forms\nadd_action('jobmatch_render_browse_filters', 'jobmatch_add_radius_filter_ui');\n\nfunction jobmatch_add_radius_filter_ui() {\n    ?>\n    <div class=\"radius-filter-wrapper\" style=\"margin: 20px 0;\">\n        <label style=\"font-weight: bold;\">Distance from you:<\/label>\n        <select id=\"radius-select\" class=\"radius-filter\" style=\"padding: 8px; margin-left: 10px;\">\n            <option value=\"\">Any distance<\/option>\n            <option value=\"5\">Within 5 km<\/option>\n            <option value=\"10\">Within 10 km<\/option>\n            <option value=\"15\">Within 15 km<\/option>\n            <option value=\"30\">Within 30 km<\/option>\n            <option value=\"50\">Within 50 km<\/option>\n            <option value=\"100\">Within 100 km<\/option>\n            <option value=\"300\">Within 300 km<\/option>\n            <option value=\"germany\">Germany-wide<\/option>\n            <option value=\"remote\">Remote only<\/option>\n        <\/select>\n        \n        <button onclick=\"applyRadiusFilter()\" style=\"padding: 8px 15px; margin-left: 10px; background: #667eea; color: white; border: none; border-radius: 4px; cursor: pointer;\">\n            Apply Filter\n        <\/button>\n    <\/div>\n    \n    <script>\n    function applyRadiusFilter() {\n        var radius = document.getElementById('radius-select').value;\n        var currentUrl = window.location.href.split('?')[0];\n        \n        if (radius) {\n            window.location.href = currentUrl + '?radius=' + radius;\n        } else {\n            window.location.href = currentUrl;\n        }\n    }\n    \n    \/\/ Set selected value if radius is in URL\n    document.addEventListener('DOMContentLoaded', function() {\n        var urlParams = new URLSearchParams(window.location.search);\n        var radius = urlParams.get('radius');\n        if (radius) {\n            document.getElementById('radius-select').value = radius;\n        }\n    });\n    <\/script>\n    <?php\n}\n\n\/\/ AJAX handler for dynamic radius filtering (without page reload)\nadd_action('wp_ajax_jobmatch_filter_by_radius', 'jobmatch_ajax_radius_filter');\nadd_action('wp_ajax_nopriv_jobmatch_filter_by_radius', 'jobmatch_ajax_radius_filter');\n\nfunction jobmatch_ajax_radius_filter() {\n    $radius = isset($_POST['radius']) ? $_POST['radius'] : '';\n    $user_id = get_current_user_id();\n    \n    if (!$user_id) {\n        wp_send_json_error('Please login to use filters');\n    }\n    \n    \/\/ Build query with radius filter\n    $args = array(\n        'post_type' => 'jobs',\n        'posts_per_page' => 20,\n        'post_status' => 'publish'\n    );\n    \n    \/\/ Get user coordinates\n    $user_coords = get_user_meta($user_id, 'lat_lng', true);\n    if (!$user_coords) {\n        $postal = get_user_meta($user_id, 'postal_code', true);\n        if ($postal && function_exists('jobmatch_geocode_postal')) {\n            $coords = jobmatch_geocode_postal($postal);\n            if ($coords) {\n                update_user_meta($user_id, 'lat_lng', $coords['lat'] . ',' . $coords['lng']);\n                $user_coords = $coords['lat'] . ',' . $coords['lng'];\n            }\n        }\n    }\n    \n    if ($radius && $user_coords) {\n        list($user_lat, $user_lng) = explode(',', $user_coords);\n        \n        if ($radius === 'remote') {\n            $args['meta_key'] = 'work_preference';\n            $args['meta_value'] = 'remote';\n        } elseif ($radius !== 'germany' && is_numeric($radius)) {\n            \/\/ Get filtered job IDs\n            global $wpdb;\n            $sql = \"\n                SELECT DISTINCT p.ID \n                FROM {$wpdb->posts} p\n                INNER JOIN {$wpdb->usermeta} um ON p.post_author = um.user_id\n                WHERE p.post_type = 'jobs' \n                AND p.post_status = 'publish'\n                AND um.meta_key = 'lat_lng'\n                AND (\n                    6371 * acos(\n                        cos(radians(%f)) * \n                        cos(radians(SUBSTRING_INDEX(um.meta_value, ',', 1))) * \n                        cos(radians(SUBSTRING_INDEX(um.meta_value, ',', -1)) - radians(%f)) + \n                        sin(radians(%f)) * \n                        sin(radians(SUBSTRING_INDEX(um.meta_value, ',', 1)))\n                    )\n                ) <= %d\n            \";\n            \n            $job_ids = $wpdb->get_col($wpdb->prepare($sql, $user_lat, $user_lng, $user_lat, intval($radius)));\n            \n            if (!empty($job_ids)) {\n                $args['post__in'] = $job_ids;\n            } else {\n                $args['post__in'] = array(0);\n            }\n        }\n    }\n    \n    \/\/ Get jobs\n    $query = new WP_Query($args);\n    \n    ob_start();\n    if ($query->have_posts()) {\n        while ($query->have_posts()) {\n            $query->the_post();\n            \/\/ Use your existing job card template\n            $job_id = get_the_ID();\n            $score = jobmatch_calculate_match_score($user_id, $job_id, 'job');\n            ?>\n            <div class=\"job-card\">\n                <h3><?php the_title(); ?><\/h3>\n                <span class=\"match-score\"><?php echo $score['score']; ?>% Match<\/span>\n                <button onclick=\"viewJob(<?php echo $job_id; ?>)\">View<\/button>\n            <\/div>\n            <?php\n        }\n    } else {\n        echo '<p>No jobs found within ' . esc_html($radius) . ' km of your location.<\/p>';\n    }\n    wp_reset_postdata();\n    \n    wp_send_json_success(array('html' => ob_get_clean()));\n\t\n\t\n\t\n}\n\n\n\n\n\/\/ Add this shortcode definition\nadd_shortcode('jobmatch_radius_filter', function() {\n    ob_start();\n    do_action('jobmatch_render_browse_filters');\n    return ob_get_clean();\n});","active":true,"modified":"2025-09-24 20:39:55","revision":"1"}]}