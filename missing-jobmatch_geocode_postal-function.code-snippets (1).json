{"generator":"Code Snippets v3.7.0","date_created":"2025-09-26 10:48","snippets":[{"id":29,"name":"missing jobmatch_geocode_postal function","code":"\n\/**\n * Add this to your existing Geo-Location System snippet\n * This provides the missing jobmatch_geocode_postal function\n *\/\n\n\/\/ Geocoding function using free Nominatim API\nfunction jobmatch_geocode_postal($postal_code, $country = 'DE') {\n    \/\/ Clean the postal code\n    $postal_code = trim($postal_code);\n    \n    \/\/ Build the API URL\n    $url = \"https:\/\/nominatim.openstreetmap.org\/search?\" . http_build_query(array(\n        'postalcode' => $postal_code,\n        'country' => $country,\n        'format' => 'json',\n        'limit' => 1\n    ));\n    \n    \/\/ Make the API request\n    $response = wp_remote_get($url, array(\n        'timeout' => 10,\n        'headers' => array(\n            'User-Agent' => 'JobMatch WordPress Plugin',\n            'Referer' => home_url()\n        )\n    ));\n    \n    \/\/ Check for errors\n    if (is_wp_error($response)) {\n        error_log('Geocoding error: ' . $response->get_error_message());\n        return false;\n    }\n    \n    \/\/ Parse the response\n    $body = wp_remote_retrieve_body($response);\n    $data = json_decode($body, true);\n    \n    \/\/ Check if we got results\n    if (!empty($data) && isset($data[0]['lat']) && isset($data[0]['lon'])) {\n        return array(\n            'lat' => floatval($data[0]['lat']),\n            'lng' => floatval($data[0]['lon'])\n        );\n    }\n    \n    \/\/ If Nominatim fails, try a backup approach for German postal codes\n    if ($country === 'DE') {\n        return jobmatch_geocode_german_postal_fallback($postal_code);\n    }\n    \n    return false;\n}\n\n\/\/ Fallback geocoding for German postal codes using rough estimates\nfunction jobmatch_geocode_german_postal_fallback($postal_code) {\n    \/\/ German postal code regions with approximate center coordinates\n    $regions = array(\n        '10' => array('lat' => 52.520, 'lng' => 13.405), \/\/ Berlin\n        '20' => array('lat' => 53.551, 'lng' => 9.994),  \/\/ Hamburg\n        '30' => array('lat' => 52.376, 'lng' => 9.732),  \/\/ Hannover\n        '40' => array('lat' => 51.228, 'lng' => 6.774),  \/\/ D\u00fcsseldorf\n        '50' => array('lat' => 50.938, 'lng' => 6.957),  \/\/ K\u00f6ln\n        '60' => array('lat' => 50.110, 'lng' => 8.682),  \/\/ Frankfurt\n        '70' => array('lat' => 48.776, 'lng' => 9.182),  \/\/ Stuttgart\n        '80' => array('lat' => 48.135, 'lng' => 11.582), \/\/ M\u00fcnchen\n        '90' => array('lat' => 49.453, 'lng' => 11.078), \/\/ N\u00fcrnberg\n    );\n    \n    \/\/ Get the first 2 digits of postal code\n    $prefix = substr($postal_code, 0, 2);\n    \n    if (isset($regions[$prefix])) {\n        return $regions[$prefix];\n    }\n    \n    \/\/ Default to center of Germany if unknown\n    return array('lat' => 51.165, 'lng' => 10.452);\n}\n\n\/\/ Also add the distance calculation if it doesn't exist\nif (!function_exists('jobmatch_calculate_distance')) {\n    function jobmatch_calculate_distance($lat1, $lon1, $lat2, $lon2) {\n        $earth_radius = 6371; \/\/ km\n        \n        $lat1 = deg2rad($lat1);\n        $lat2 = deg2rad($lat2);\n        $lon1 = deg2rad($lon1);\n        $lon2 = deg2rad($lon2);\n        \n        $dlat = $lat2 - $lat1;\n        $dlon = $lon2 - $lon1;\n        \n        $a = sin($dlat\/2) * sin($dlat\/2) + \n             cos($lat1) * cos($lat2) * \n             sin($dlon\/2) * sin($dlon\/2);\n        \n        $c = 2 * atan2(sqrt($a), sqrt(1-$a));\n        \n        return $earth_radius * $c;\n    }\n}","active":true,"modified":"2025-09-24 20:15:31","revision":"1"}]}