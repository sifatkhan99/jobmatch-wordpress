{"generator":"Code Snippets v3.7.0","date_created":"2025-09-26 10:47","snippets":[{"id":6,"name":"01-core-setup\/database-tables.php","code":"\/**\n * Database Tables Setup for Job Matching Platform\n * Add this to Code Snippets plugin\n *\/\n\n\/\/ Create custom tables on activation\nadd_action('wp_loaded', 'jobmatch_create_tables');\n\nfunction jobmatch_create_tables() {\n    \/\/ Only run once\n    if (get_option('jobmatch_tables_created') === get_option('jobmatch_db_version', '1.0')) {\n        return;\n    }\n\n    global $wpdb;\n    \n    $charset_collate = $wpdb->get_charset_collate();\n\n    \/\/ Match Scores Table - for caching calculated match percentages\n    $table_name = $wpdb->prefix . 'match_scores';\n    $sql = \"CREATE TABLE $table_name (\n        id mediumint(9) NOT NULL AUTO_INCREMENT,\n        user_id bigint(20) NOT NULL,\n        target_id bigint(20) NOT NULL,\n        target_type varchar(20) NOT NULL,\n        score decimal(5,2) NOT NULL,\n        factors longtext,\n        created_at datetime DEFAULT CURRENT_TIMESTAMP,\n        updated_at datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n        PRIMARY KEY (id),\n        INDEX user_target_idx (user_id, target_id, target_type),\n        INDEX score_idx (score DESC),\n        INDEX created_idx (created_at)\n    ) $charset_collate;\";\n\n    require_once(ABSPATH . 'wp-admin\/includes\/upgrade.php');\n    dbDelta($sql);\n\n    \/\/ Credit Transactions Table - for tracking all credit movements\n    $table_name = $wpdb->prefix . 'credit_transactions';\n    $sql = \"CREATE TABLE $table_name (\n        id mediumint(9) NOT NULL AUTO_INCREMENT,\n        user_id bigint(20) NOT NULL,\n        transaction_type varchar(20) NOT NULL,\n        amount int(11) NOT NULL,\n        balance_before int(11) NOT NULL,\n        balance_after int(11) NOT NULL,\n        reference_id bigint(20) NULL,\n        reference_type varchar(50) NULL,\n        description text,\n        stripe_payment_id varchar(255) NULL,\n        created_at datetime DEFAULT CURRENT_TIMESTAMP,\n        PRIMARY KEY (id),\n        INDEX user_idx (user_id),\n        INDEX type_idx (transaction_type),\n        INDEX created_idx (created_at),\n        INDEX reference_idx (reference_id, reference_type)\n    ) $charset_collate;\";\n\n    dbDelta($sql);\n\n    \/\/ Notifications Table - for in-app and email notifications\n    $table_name = $wpdb->prefix . 'jobmatch_notifications';\n    $sql = \"CREATE TABLE $table_name (\n        id mediumint(9) NOT NULL AUTO_INCREMENT,\n        user_id bigint(20) NOT NULL,\n        type varchar(50) NOT NULL,\n        title varchar(255) NOT NULL,\n        message text NOT NULL,\n        action_url varchar(255) NULL,\n        is_read tinyint(1) DEFAULT 0,\n        email_sent tinyint(1) DEFAULT 0,\n        created_at datetime DEFAULT CURRENT_TIMESTAMP,\n        read_at datetime NULL,\n        PRIMARY KEY (id),\n        INDEX user_read_idx (user_id, is_read),\n        INDEX type_idx (type),\n        INDEX created_idx (created_at)\n    ) $charset_collate;\";\n\n    dbDelta($sql);\n\n    \/\/ Geo Locations Cache - for postal code to lat\/lng conversion\n    $table_name = $wpdb->prefix . 'geo_locations';\n    $sql = \"CREATE TABLE $table_name (\n        id mediumint(9) NOT NULL AUTO_INCREMENT,\n        postal_code varchar(10) NOT NULL,\n        city varchar(100) NOT NULL,\n        country varchar(2) DEFAULT 'DE',\n        latitude decimal(10,8) NOT NULL,\n        longitude decimal(11,8) NOT NULL,\n        created_at datetime DEFAULT CURRENT_TIMESTAMP,\n        PRIMARY KEY (id),\n        UNIQUE KEY postal_country_idx (postal_code, country),\n        INDEX lat_lng_idx (latitude, longitude)\n    ) $charset_collate;\";\n\n    dbDelta($sql);\n\n    \/\/ Match History - for tracking all match interactions\n    $table_name = $wpdb->prefix . 'match_history';\n    $sql = \"CREATE TABLE $table_name (\n        id mediumint(9) NOT NULL AUTO_INCREMENT,\n        match_id bigint(20) NOT NULL,\n        user_id bigint(20) NOT NULL,\n        action varchar(50) NOT NULL,\n        old_status varchar(50) NULL,\n        new_status varchar(50) NOT NULL,\n        metadata longtext NULL,\n        created_at datetime DEFAULT CURRENT_TIMESTAMP,\n        PRIMARY KEY (id),\n        INDEX match_idx (match_id),\n        INDEX user_idx (user_id),\n        INDEX action_idx (action),\n        INDEX created_idx (created_at)\n    ) $charset_collate;\";\n\n    dbDelta($sql);\n\n    \/\/ Mark tables as created\n    update_option('jobmatch_tables_created', get_option('jobmatch_db_version', '1.0'));\n}\n\n\/\/ Helper functions for database operations\n\n\/**\n * Get or create match score between user and target\n *\/\nfunction jobmatch_get_match_score($user_id, $target_id, $target_type) {\n    global $wpdb;\n    \n    $table_name = $wpdb->prefix . 'match_scores';\n    \n    $score = $wpdb->get_row($wpdb->prepare(\n        \"SELECT * FROM $table_name WHERE user_id = %d AND target_id = %d AND target_type = %s\",\n        $user_id, $target_id, $target_type\n    ));\n    \n    return $score;\n}\n\n\/**\n * Update match score\n *\/\nfunction jobmatch_update_match_score($user_id, $target_id, $target_type, $score, $factors = array()) {\n    global $wpdb;\n    \n    $table_name = $wpdb->prefix . 'match_scores';\n    \n    $existing = jobmatch_get_match_score($user_id, $target_id, $target_type);\n    \n    $data = array(\n        'user_id' => $user_id,\n        'target_id' => $target_id,\n        'target_type' => $target_type,\n        'score' => $score,\n        'factors' => maybe_serialize($factors)\n    );\n    \n    if ($existing) {\n        $wpdb->update($table_name, $data, array('id' => $existing->id));\n    } else {\n        $wpdb->insert($table_name, $data);\n    }\n}\n\n\/**\n * Add credit transaction\n *\/\nfunction jobmatch_add_credit_transaction($user_id, $type, $amount, $description = '', $reference_id = null, $reference_type = null, $stripe_payment_id = null) {\n    global $wpdb;\n    \n    \/\/ Get current balance\n    $current_balance = get_user_meta($user_id, 'credit_balance', true) ?: 0;\n    $new_balance = $current_balance + $amount;\n    \n    \/\/ Insert transaction\n    $table_name = $wpdb->prefix . 'credit_transactions';\n    $result = $wpdb->insert($table_name, array(\n        'user_id' => $user_id,\n        'transaction_type' => $type,\n        'amount' => $amount,\n        'balance_before' => $current_balance,\n        'balance_after' => $new_balance,\n        'reference_id' => $reference_id,\n        'reference_type' => $reference_type,\n        'description' => $description,\n        'stripe_payment_id' => $stripe_payment_id\n    ));\n    \n    if ($result) {\n        \/\/ Update user balance\n        update_user_meta($user_id, 'credit_balance', $new_balance);\n        \n        \/\/ Log the transaction\n        error_log(\"Credit transaction: User $user_id, Type: $type, Amount: $amount, New Balance: $new_balance\");\n        \n        return $wpdb->insert_id;\n    }\n    \n    return false;\n}\n\n\/**\n * Get user credit balance with safety check\n *\/\nfunction jobmatch_get_credit_balance($user_id) {\n    $balance = get_user_meta($user_id, 'credit_balance', true);\n    return intval($balance);\n}\n\n\/**\n * Check if user has sufficient credits\n *\/\nfunction jobmatch_has_sufficient_credits($user_id, $required = 1) {\n    $balance = jobmatch_get_credit_balance($user_id);\n    return $balance >= $required;\n}\n\n\/**\n * Add notification\n *\/\nfunction jobmatch_add_notification($user_id, $type, $title, $message, $action_url = null) {\n    global $wpdb;\n    \n    $table_name = $wpdb->prefix . 'jobmatch_notifications';\n    \n    $result = $wpdb->insert($table_name, array(\n        'user_id' => $user_id,\n        'type' => $type,\n        'title' => $title,\n        'message' => $message,\n        'action_url' => $action_url\n    ));\n    \n    if ($result) {\n        \/\/ Check if user wants email notifications\n        $email_notifications = get_user_meta($user_id, 'email_notifications_enabled', true);\n        if ($email_notifications === 'yes') {\n            \/\/ Schedule email (we'll implement this later)\n            wp_schedule_single_event(time() + 60, 'jobmatch_send_notification_email', array($wpdb->insert_id));\n        }\n        \n        return $wpdb->insert_id;\n    }\n    \n    return false;\n}\n\n\/**\n * Get unread notifications count\n *\/\nfunction jobmatch_get_unread_notifications_count($user_id) {\n    global $wpdb;\n    \n    $table_name = $wpdb->prefix . 'jobmatch_notifications';\n    \n    return $wpdb->get_var($wpdb->prepare(\n        \"SELECT COUNT(*) FROM $table_name WHERE user_id = %d AND is_read = 0\",\n        $user_id\n    ));\n}\n\n\/**\n * Get user notifications\n *\/\nfunction jobmatch_get_user_notifications($user_id, $limit = 10, $offset = 0) {\n    global $wpdb;\n    \n    $table_name = $wpdb->prefix . 'jobmatch_notifications';\n    \n    return $wpdb->get_results($wpdb->prepare(\n        \"SELECT * FROM $table_name WHERE user_id = %d ORDER BY created_at DESC LIMIT %d OFFSET %d\",\n        $user_id, $limit, $offset\n    ));\n}\n\n\/**\n * Mark notification as read\n *\/\nfunction jobmatch_mark_notification_read($notification_id, $user_id = null) {\n    global $wpdb;\n    \n    $table_name = $wpdb->prefix . 'jobmatch_notifications';\n    \n    $where = array('id' => $notification_id);\n    if ($user_id) {\n        $where['user_id'] = $user_id;\n    }\n    \n    return $wpdb->update($table_name, \n        array('is_read' => 1, 'read_at' => current_time('mysql')), \n        $where\n    );\n}\n\n\/**\n * Add match history entry\n *\/\nfunction jobmatch_add_match_history($match_id, $user_id, $action, $old_status = null, $new_status, $metadata = array()) {\n    global $wpdb;\n    \n    $table_name = $wpdb->prefix . 'match_history';\n    \n    return $wpdb->insert($table_name, array(\n        'match_id' => $match_id,\n        'user_id' => $user_id,\n        'action' => $action,\n        'old_status' => $old_status,\n        'new_status' => $new_status,\n        'metadata' => maybe_serialize($metadata)\n    ));\n}\n\n\/**\n * Get postal code coordinates (placeholder - you'll need a geocoding service)\n *\/\nfunction jobmatch_get_postal_coordinates($postal_code, $country = 'DE') {\n    global $wpdb;\n    \n    $table_name = $wpdb->prefix . 'geo_locations';\n    \n    $location = $wpdb->get_row($wpdb->prepare(\n        \"SELECT * FROM $table_name WHERE postal_code = %s AND country = %s\",\n        $postal_code, $country\n    ));\n    \n    if ($location) {\n        return array(\n            'lat' => floatval($location->latitude),\n            'lng' => floatval($location->longitude),\n            'city' => $location->city\n        );\n    }\n    \n    \/\/ If not found, you would call a geocoding service here\n    \/\/ For now, return Berlin coordinates as default\n    return array(\n        'lat' => 52.5200,\n        'lng' => 13.4050,\n        'city' => 'Unknown'\n    );\n}\n\n\/**\n * Calculate distance between two points\n *\/\nfunction jobmatch_calculate_distance($lat1, $lon1, $lat2, $lon2) {\n    $earth_radius = 6371; \/\/ Earth radius in kilometers\n    \n    $lat_diff = deg2rad($lat2 - $lat1);\n    $lon_diff = deg2rad($lon2 - $lon1);\n    \n    $a = sin($lat_diff\/2) * sin($lat_diff\/2) + \n         cos(deg2rad($lat1)) * cos(deg2rad($lat2)) * \n         sin($lon_diff\/2) * sin($lon_diff\/2);\n         \n    $c = 2 * asin(sqrt($a));\n    \n    return $earth_radius * $c;\n}\n\n\/\/ Clean up old match scores (run weekly)\nadd_action('wp', 'jobmatch_schedule_cleanup');\nfunction jobmatch_schedule_cleanup() {\n    if (!wp_next_scheduled('jobmatch_cleanup_old_scores')) {\n        wp_schedule_event(time(), 'weekly', 'jobmatch_cleanup_old_scores');\n    }\n}\n\nadd_action('jobmatch_cleanup_old_scores', 'jobmatch_cleanup_old_scores');\nfunction jobmatch_cleanup_old_scores() {\n    global $wpdb;\n    \n    $table_name = $wpdb->prefix . 'match_scores';\n    \n    \/\/ Delete match scores older than 30 days for inactive users\n    $wpdb->query(\"\n        DELETE FROM $table_name \n        WHERE created_at < DATE_SUB(NOW(), INTERVAL 30 DAY)\n        AND user_id IN (\n            SELECT ID FROM {$wpdb->users} \n            WHERE user_login NOT IN (\n                SELECT user_login FROM {$wpdb->users} \n                WHERE ID IN (\n                    SELECT user_id FROM {$wpdb->usermeta} \n                    WHERE meta_key = 'last_login' \n                    AND meta_value > DATE_SUB(NOW(), INTERVAL 7 DAY)\n                )\n            )\n        )\n    \");\n}","active":true,"modified":"2025-09-22 20:11:12","revision":"1"}]}