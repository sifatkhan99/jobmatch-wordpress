{"generator":"Code Snippets v3.7.0","date_created":"2025-09-26 10:47","snippets":[{"id":10,"name":"04-mutual-matching\/match-handler-reveal.php","code":"\/**\n * Mutual Matching and Identity Reveal System\n * Add this to Code Snippets plugin\n *\/\n\n\/\/ AJAX handler for match actions\nadd_action('wp_ajax_handle_match_action', 'jobmatch_handle_match_action');\n\nfunction jobmatch_handle_match_action() {\n    check_ajax_referer('jobmatch_nonce', 'nonce');\n    \n    $current_user_id = get_current_user_id();\n    $target_user_id = intval($_POST['target_user_id']);\n    $action = sanitize_text_field($_POST['action']);\n    $job_id = intval($_POST['job_id'] ?? 0); \/\/ Optional job ID for job-specific matches\n    \n    if (!$current_user_id || !$target_user_id) {\n        wp_send_json_error('Invalid user IDs');\n    }\n    \n    \/\/ Security check - ensure users can interact\n    $current_role = get_user_meta($current_user_id, 'user_role', true);\n    $target_role = get_user_meta($target_user_id, 'user_role', true);\n    \n    if (($current_role === 'developer' && $target_role !== 'company') || \n        ($current_role === 'company' && $target_role !== 'developer')) {\n        wp_send_json_error('Invalid user interaction');\n    }\n    \n    $result = false;\n    \n    switch ($action) {\n        case 'like':\n        case 'match':\n            $result = jobmatch_process_like($current_user_id, $target_user_id, $job_id);\n            break;\n        case 'pass':\n            $result = jobmatch_process_pass($current_user_id, $target_user_id, $job_id);\n            break;\n        case 'open_chat':\n            $result = jobmatch_open_chat($current_user_id, $target_user_id);\n            break;\n    }\n    \n    if ($result) {\n        wp_send_json_success($result);\n    } else {\n        wp_send_json_error('Action failed');\n    }\n}\n\n\/\/ Process like\/match action\nfunction jobmatch_process_like($current_user_id, $target_user_id, $job_id = 0) {\n    global $wpdb;\n    \n    $current_role = get_user_meta($current_user_id, 'user_role', true);\n    \n    \/\/ Check for existing match record\n    $existing_match = jobmatch_find_match_record($current_user_id, $target_user_id, $job_id);\n    \n    if ($existing_match) {\n        \/\/ Update existing match\n        $current_status = get_post_meta($existing_match->ID, 'match_status', true);\n        \n        if ($current_status === 'mutual' || $current_status === 'revealed') {\n            return array('status' => 'already_matched', 'match_id' => $existing_match->ID);\n        }\n        \n        \/\/ Check if this creates a mutual match\n        $opposite_status = ($current_role === 'developer') ? 'company_liked' : 'developer_liked';\n        \n        if ($current_status === $opposite_status) {\n            \/\/ It's a mutual match!\n            $result = jobmatch_create_mutual_match($existing_match->ID, $current_user_id, $target_user_id, $job_id);\n            return $result;\n        } else {\n            \/\/ Update to show this user liked\n            $new_status = ($current_role === 'developer') ? 'developer_liked' : 'company_liked';\n            update_post_meta($existing_match->ID, 'match_status', $new_status);\n            \n            \/\/ Add history\n            jobmatch_add_match_history($existing_match->ID, $current_user_id, 'liked', $current_status, $new_status);\n            \n            return array('status' => 'liked', 'match_id' => $existing_match->ID);\n        }\n    } else {\n        \/\/ Create new match record\n        $match_id = jobmatch_create_match_record($current_user_id, $target_user_id, $job_id);\n        if ($match_id) {\n            return array('status' => 'liked', 'match_id' => $match_id);\n        }\n    }\n    \n    return false;\n}\n\n\/\/ Find existing match record between users\nfunction jobmatch_find_match_record($user1_id, $user2_id, $job_id = 0) {\n    global $wpdb;\n    \n    $query = \"\n        SELECT p.* FROM {$wpdb->posts} p\n        INNER JOIN {$wpdb->postmeta} m1 ON p.ID = m1.post_id\n        INNER JOIN {$wpdb->postmeta} m2 ON p.ID = m2.post_id\n        WHERE p.post_type = 'matches'\n        AND p.post_status = 'publish'\n        AND (\n            (m1.meta_key = 'developer_id' AND m1.meta_value = %s AND m2.meta_key = 'company_id' AND m2.meta_value = %s)\n            OR\n            (m1.meta_key = 'developer_id' AND m1.meta_value = %s AND m2.meta_key = 'company_id' AND m2.meta_value = %s)\n        )\n    \";\n    \n    $params = array($user1_id, $user2_id, $user2_id, $user1_id);\n    \n    if ($job_id) {\n        $query .= \" AND p.ID IN (SELECT post_id FROM {$wpdb->postmeta} WHERE meta_key = 'job_id' AND meta_value = %s)\";\n        $params[] = $job_id;\n    }\n    \n    return $wpdb->get_row($wpdb->prepare($query, $params));\n}\n\n\/\/ Create new match record\nfunction jobmatch_create_match_record($current_user_id, $target_user_id, $job_id = 0) {\n    $current_role = get_user_meta($current_user_id, 'user_role', true);\n    \n    \/\/ Determine developer and company IDs\n    if ($current_role === 'developer') {\n        $developer_id = $current_user_id;\n        $company_id = $target_user_id;\n        $initial_status = 'developer_liked';\n    } else {\n        $developer_id = $target_user_id;\n        $company_id = $current_user_id;\n        $initial_status = 'company_liked';\n    }\n    \n    \/\/ Create match post\n    $match_post = array(\n        'post_title' => 'Match: Developer ' . $developer_id . ' & Company ' . $company_id,\n        'post_type' => 'matches',\n        'post_status' => 'publish',\n        'post_author' => $current_user_id,\n    );\n    \n    $match_id = wp_insert_post($match_post);\n    \n    if ($match_id) {\n        \/\/ Add meta data\n        update_post_meta($match_id, 'developer_id', $developer_id);\n        update_post_meta($match_id, 'company_id', $company_id);\n        update_post_meta($match_id, 'match_status', $initial_status);\n        update_post_meta($match_id, 'created_by', $current_user_id);\n        update_post_meta($match_id, 'match_score', jobmatch_get_cached_score($developer_id, $company_id));\n        \n        if ($job_id) {\n            update_post_meta($match_id, 'job_id', $job_id);\n        }\n        \n        \/\/ Add history\n        jobmatch_add_match_history($match_id, $current_user_id, 'created', null, $initial_status);\n        \n        \/\/ Send notification to other user\n        $other_user_id = ($current_user_id === $developer_id) ? $company_id : $developer_id;\n        $current_user_name = jobmatch_get_display_name($current_user_id, $other_user_id);\n        \n        jobmatch_add_notification(\n            $other_user_id,\n            'new_match',\n            'Someone liked you!',\n            $current_user_name . ' is interested in connecting with you.',\n            home_url('\/matches\/')\n        );\n        \n        return $match_id;\n    }\n    \n    return false;\n}\n\n\/\/ Create mutual match and handle credit deduction\nfunction jobmatch_create_mutual_match($match_id, $current_user_id, $target_user_id, $job_id = 0) {\n    \/\/ Update match status to mutual\n    update_post_meta($match_id, 'match_status', 'mutual');\n    update_post_meta($match_id, 'mutual_at', current_time('mysql'));\n    \n    \/\/ Add history\n    $old_status = get_post_meta($match_id, 'match_status', true);\n    jobmatch_add_match_history($match_id, $current_user_id, 'mutual_match', $old_status, 'mutual');\n    \n    \/\/ Determine who pays (company)\n    $current_role = get_user_meta($current_user_id, 'user_role', true);\n    $target_role = get_user_meta($target_user_id, 'user_role', true);\n    \n    $company_id = ($current_role === 'company') ? $current_user_id : $target_user_id;\n    $developer_id = ($current_role === 'developer') ? $current_user_id : $target_user_id;\n    \n    \/\/ Check if company has sufficient credits\n    if (!jobmatch_has_sufficient_credits($company_id, 1)) {\n        \/\/ Insufficient credits - don't reveal, prompt to purchase\n        jobmatch_add_notification(\n            $company_id,\n            'insufficient_credits',\n            'Insufficient Credits!',\n            'You need more credits to complete this match. Purchase more to continue.',\n            home_url('\/buy-credits\/')\n        );\n        \n        return array(\n            'status' => 'insufficient_credits',\n            'match_id' => $match_id,\n            'message' => 'Insufficient credits to complete match'\n        );\n    }\n    \n    \/\/ Deduct credit from company\n    $transaction_id = jobmatch_add_credit_transaction(\n        $company_id,\n        'deduction',\n        -1,\n        'Mutual match with developer #' . $developer_id,\n        $match_id,\n        'match'\n    );\n    \n    if (!$transaction_id) {\n        return array('status' => 'error', 'message' => 'Credit deduction failed');\n    }\n    \n    \/\/ Reveal identities\n    $reveal_result = jobmatch_reveal_identities($match_id, $company_id, $developer_id);\n    \n    if ($reveal_result) {\n        \/\/ Send notifications to both users\n        $company_name = jobmatch_get_display_name($company_id);\n        $developer_name = jobmatch_get_display_name($developer_id);\n        \n        jobmatch_add_notification(\n            $company_id,\n            'mutual_match',\n            'It\\'s a Match! \ud83c\udf89',\n            'You matched with ' . $developer_name . '. You can now see their contact details and start chatting.',\n            home_url('\/matches\/?match=' . $match_id)\n        );\n        \n        jobmatch_add_notification(\n            $developer_id,\n            'mutual_match',\n            'It\\'s a Match! \ud83c\udf89',\n            'You matched with ' . $company_name . '. You can now see their contact details and start chatting.',\n            home_url('\/matches\/?match=' . $match_id)\n        );\n        \n        return array(\n            'status' => 'mutual_match',\n            'match_id' => $match_id,\n            'revealed' => true,\n            'company_profile' => jobmatch_get_anonymous_profile($company_id, $developer_id),\n            'developer_profile' => jobmatch_get_anonymous_profile($developer_id, $company_id),\n            'chat_url' => home_url('\/chat\/?match=' . $match_id)\n        );\n    }\n    \n    return false;\n}\n\n\/\/ Reveal identities between matched users\nfunction jobmatch_reveal_identities($match_id, $company_id, $developer_id) {\n    \/\/ Update match status to revealed\n    update_post_meta($match_id, 'match_status', 'revealed');\n    update_post_meta($match_id, 'revealed_at', current_time('mysql'));\n    \n    \/\/ Create reveal record for audit\n    update_post_meta($match_id, 'identity_revealed', true);\n    \n    \/\/ Add history\n    jobmatch_add_match_history($match_id, 0, 'identity_revealed', 'mutual', 'revealed', array(\n        'company_id' => $company_id,\n        'developer_id' => $developer_id,\n        'timestamp' => current_time('mysql')\n    ));\n    \n    \/\/ Log the reveal for privacy audit\n    jobmatch_log_profile_access($company_id, $developer_id, true);\n    jobmatch_log_profile_access($developer_id, $company_id, true);\n    \n    return true;\n}\n\n\/\/ Process pass action\nfunction jobmatch_process_pass($current_user_id, $target_user_id, $job_id = 0) {\n    \/\/ Find existing match\n    $existing_match = jobmatch_find_match_record($current_user_id, $target_user_id, $job_id);\n    \n    if ($existing_match) {\n        \/\/ Update status to passed\n        update_post_meta($existing_match->ID, 'match_status', 'passed');\n        jobmatch_add_match_history($existing_match->ID, $current_user_id, 'passed', null, 'passed');\n    } else {\n        \/\/ Create a pass record\n        $match_id = jobmatch_create_match_record($current_user_id, $target_user_id, $job_id);\n        if ($match_id) {\n            update_post_meta($match_id, 'match_status', 'passed');\n            jobmatch_add_match_history($match_id, $current_user_id, 'passed', null, 'passed');\n        }\n    }\n    \n    return array('status' => 'passed');\n}\n\n\/\/ Open chat between matched users\nfunction jobmatch_open_chat($current_user_id, $target_user_id) {\n    \/\/ Verify mutual match exists\n    $match = jobmatch_find_match_record($current_user_id, $target_user_id);\n    \n    if (!$match) {\n        return array('status' => 'error', 'message' => 'No match found');\n    }\n    \n    $match_status = get_post_meta($match->ID, 'match_status', true);\n    \n    if (!in_array($match_status, array('mutual', 'revealed', 'chatting'))) {\n        return array('status' => 'error', 'message' => 'Match not mutual yet');\n    }\n    \n    \/\/ Update status to chatting if not already\n    if ($match_status !== 'chatting') {\n        update_post_meta($match->ID, 'match_status', 'chatting');\n        update_post_meta($match->ID, 'chat_started_at', current_time('mysql'));\n        jobmatch_add_match_history($match->ID, $current_user_id, 'chat_started', $match_status, 'chatting');\n    }\n    \n    return array(\n        'status' => 'chat_opened',\n        'match_id' => $match->ID,\n        'chat_url' => home_url('\/chat\/?match=' . $match->ID)\n    );\n}\n\n\/\/ Get cached match score between users\nfunction jobmatch_get_cached_score($user1_id, $user2_id) {\n    $user1_role = get_user_meta($user1_id, 'user_role', true);\n    \n    if ($user1_role === 'developer') {\n        $score = jobmatch_get_match_score($user1_id, $user2_id, 'company');\n    } else {\n        $score = jobmatch_get_match_score($user2_id, $user1_id, 'developer');\n    }\n    \n    return $score ? $score->score : 0;\n}\n\n\/\/ Get all matches for a user\nfunction jobmatch_get_user_matches($user_id, $status = 'all', $limit = 20) {\n    global $wpdb;\n    \n    $user_role = get_user_meta($user_id, 'user_role', true);\n    \n    $meta_key = ($user_role === 'developer') ? 'developer_id' : 'company_id';\n    \n    $query = \"\n        SELECT p.*, pm_status.meta_value as match_status, pm_score.meta_value as match_score,\n               pm_dev.meta_value as developer_id, pm_comp.meta_value as company_id,\n               pm_job.meta_value as job_id, pm_mutual.meta_value as mutual_at\n        FROM {$wpdb->posts} p\n        LEFT JOIN {$wpdb->postmeta} pm_status ON p.ID = pm_status.post_id AND pm_status.meta_key = 'match_status'\n        LEFT JOIN {$wpdb->postmeta} pm_score ON p.ID = pm_score.post_id AND pm_score.meta_key = 'match_score'\n        LEFT JOIN {$wpdb->postmeta} pm_dev ON p.ID = pm_dev.post_id AND pm_dev.meta_key = 'developer_id'\n        LEFT JOIN {$wpdb->postmeta} pm_comp ON p.ID = pm_comp.post_id AND pm_comp.meta_key = 'company_id'\n        LEFT JOIN {$wpdb->postmeta} pm_job ON p.ID = pm_job.post_id AND pm_job.meta_key = 'job_id'\n        LEFT JOIN {$wpdb->postmeta} pm_mutual ON p.ID = pm_mutual.post_id AND pm_mutual.meta_key = 'mutual_at'\n        WHERE p.post_type = 'matches'\n        AND p.post_status = 'publish'\n        AND p.ID IN (\n            SELECT post_id FROM {$wpdb->postmeta} \n            WHERE meta_key = %s AND meta_value = %s\n        )\n    \";\n    \n    $params = array($meta_key, $user_id);\n    \n    if ($status !== 'all') {\n        $query .= \" AND pm_status.meta_value = %s\";\n        $params[] = $status;\n    }\n    \n    $query .= \" ORDER BY p.post_date DESC LIMIT %d\";\n    $params[] = $limit;\n    \n    return $wpdb->get_results($wpdb->prepare($query, $params));\n}\n\n\/\/ Render matches for dashboard\nfunction jobmatch_render_matches($user_id, $status = 'all') {\n    $matches = jobmatch_get_user_matches($user_id, $status);\n    \n    if (empty($matches)) {\n        return '<div class=\"no-matches\">No matches found.<\/div>';\n    }\n    \n    ob_start();\n    ?>\n    <div class=\"matches-container\">\n        <?php foreach ($matches as $match): ?>\n            <?php\n            $other_user_id = ($match->developer_id == $user_id) ? $match->company_id : $match->developer_id;\n            $profile = jobmatch_get_anonymous_profile($other_user_id, $user_id);\n            $match_status = $match->match_status;\n            $is_revealed = in_array($match_status, array('mutual', 'revealed', 'chatting'));\n            ?>\n            \n            <div class=\"match-card <?php echo $match_status; ?>\" data-match-id=\"<?php echo $match->ID; ?>\">\n                <div class=\"match-header\">\n                    <?php echo jobmatch_get_display_avatar($other_user_id, $user_id, 'medium'); ?>\n                    \n                    <div class=\"match-info\">\n                        <h3><?php echo esc_html($profile['name']); ?><\/h3>\n                        <p><?php echo esc_html($profile['location']); ?><\/p>\n                        <?php if ($match->match_score): ?>\n                            <div class=\"match-score\"><?php echo $match->match_score; ?>% match<\/div>\n                        <?php endif; ?>\n                    <\/div>\n                    \n                    <div class=\"match-status-badge\">\n                        <?php\n                        $status_labels = array(\n                            'developer_liked' => '\ud83d\udc99 You liked',\n                            'company_liked' => '\ud83d\udc99 They liked',\n                            'mutual' => '\ud83d\udc9a Mutual',\n                            'revealed' => '\ud83c\udf89 Revealed',\n                            'chatting' => '\ud83d\udcac Chatting',\n                            'passed' => '\ud83d\udc4b Passed'\n                        );\n                        echo $status_labels[$match_status] ?? ucfirst($match_status);\n                        ?>\n                    <\/div>\n                <\/div>\n                \n                <?php if ($is_revealed && $profile['is_revealed']): ?>\n                    <div class=\"revealed-contact\">\n                        <h4>Contact Information<\/h4>\n                        <?php if ($profile['type'] === 'developer'): ?>\n                            <p><strong>Email:<\/strong> <?php echo esc_html($profile['email']); ?><\/p>\n                            <?php if ($profile['linkedin']): ?>\n                                <p><strong>LinkedIn:<\/strong> <a href=\"<?php echo esc_url($profile['linkedin']); ?>\" target=\"_blank\">View Profile<\/a><\/p>\n                            <?php endif; ?>\n                        <?php else: ?>\n                            <p><strong>Company:<\/strong> <?php echo esc_html($profile['name']); ?><\/p>\n                            <p><strong>Email:<\/strong> <?php echo esc_html($profile['contact_email']); ?><\/p>\n                            <?php if ($profile['website']): ?>\n                                <p><strong>Website:<\/strong> <a href=\"<?php echo esc_url($profile['website']); ?>\" target=\"_blank\"><?php echo esc_html($profile['website']); ?><\/a><\/p>\n                            <?php endif; ?>\n                        <?php endif; ?>\n                    <\/div>\n                <?php endif; ?>\n                \n                <div class=\"match-actions\">\n                    <?php if ($match_status === 'developer_liked' && get_user_meta($user_id, 'user_role', true) === 'company'): ?>\n                        <button class=\"btn-match-back\" onclick=\"handleMatchAction(<?php echo $other_user_id; ?>, 'like')\">\ud83d\udc9a Match Back<\/button>\n                        <button class=\"btn-pass\" onclick=\"handleMatchAction(<?php echo $other_user_id; ?>, 'pass')\">\ud83d\udc4b Pass<\/button>\n                    <?php elseif ($match_status === 'company_liked' && get_user_meta($user_id, 'user_role', true) === 'developer'): ?>\n                        <button class=\"btn-match-back\" onclick=\"handleMatchAction(<?php echo $other_user_id; ?>, 'like')\">\ud83d\udc9a Match Back<\/button>\n                        <button class=\"btn-pass\" onclick=\"handleMatchAction(<?php echo $other_user_id; ?>, 'pass')\">\ud83d\udc4b Pass<\/button>\n                    <?php elseif (in_array($match_status, array('mutual', 'revealed', 'chatting'))): ?>\n                        <button class=\"btn-chat\" onclick=\"openChat(<?php echo $match->ID; ?>)\">\ud83d\udcac Chat<\/button>\n                        <button class=\"btn-view-profile\" onclick=\"viewProfile(<?php echo $other_user_id; ?>)\">\ud83d\udc64 View Profile<\/button>\n                    <?php endif; ?>\n                    \n                    <span class=\"match-date\"><?php echo human_time_diff(strtotime($match->post_date)); ?> ago<\/span>\n                <\/div>\n            <\/div>\n        <?php endforeach; ?>\n    <\/div>\n    \n    <script>\n    function handleMatchAction(targetUserId, action) {\n        jQuery.post(ajaxurl, {\n            action: 'handle_match_action',\n            target_user_id: targetUserId,\n            action: action,\n            nonce: jobmatch_nonce\n        }, function(response) {\n            if (response.success) {\n                if (response.data.status === 'mutual_match') {\n                    showMatchModal(response.data);\n                } else {\n                    location.reload(); \/\/ Simple refresh for now\n                }\n            } else {\n                alert('Error: ' + response.data);\n            }\n        });\n    }\n    \n    function openChat(matchId) {\n        window.location.href = '<?php echo home_url('\/chat\/'); ?>?match=' + matchId;\n    }\n    \n    function viewProfile(userId) {\n        \/\/ Open profile in modal or new page\n        window.location.href = '<?php echo home_url('\/profile\/'); ?>?user=' + userId;\n    }\n    \n    function showMatchModal(data) {\n        \/\/ Create and show match success modal\n        const modal = document.createElement('div');\n        modal.className = 'match-success-modal';\n        modal.innerHTML = `\n            <div class=\"modal-content\">\n                <h2>\ud83c\udf89 It's a Match!<\/h2>\n                <p>You can now see each other's contact information and start chatting.<\/p>\n                <div class=\"modal-actions\">\n                    <button onclick=\"openChat(${data.match_id})\" class=\"btn-primary\">\ud83d\udcac Start Chatting<\/button>\n                    <button onclick=\"this.closest('.match-success-modal').remove()\" class=\"btn-secondary\">Close<\/button>\n                <\/div>\n            <\/div>\n        `;\n        document.body.appendChild(modal);\n    }\n    <\/script>\n    <?php\n    return ob_get_clean();\n}\n\n\/\/ Shortcode for displaying matches\nadd_shortcode('jobmatch_matches', 'jobmatch_matches_shortcode');\n\nfunction jobmatch_matches_shortcode($atts) {\n    $atts = shortcode_atts(array(\n        'user_id' => get_current_user_id(),\n        'status' => 'all',\n        'limit' => 20\n    ), $atts);\n    \n    if (!is_user_logged_in()) {\n        return 'Please log in to view matches.';\n    }\n    \n    return jobmatch_render_matches($atts['user_id'], $atts['status']);\n}\n\n\/\/ Get match statistics for user\nfunction jobmatch_get_match_stats($user_id) {\n    global $wpdb;\n    \n    $user_role = get_user_meta($user_id, 'user_role', true);\n    $meta_key = ($user_role === 'developer') ? 'developer_id' : 'company_id';\n    \n    $stats = array();\n    \n    \/\/ Total matches\n    $stats['total'] = $wpdb->get_var($wpdb->prepare(\"\n        SELECT COUNT(*) FROM {$wpdb->posts} p\n        WHERE p.post_type = 'matches'\n        AND p.post_status = 'publish'\n        AND p.ID IN (\n            SELECT post_id FROM {$wpdb->postmeta}\n            WHERE meta_key = %s AND meta_value = %s\n        )\n    \", $meta_key, $user_id));\n    \n    \/\/ Mutual matches\n    $stats['mutual'] = $wpdb->get_var($wpdb->prepare(\"\n        SELECT COUNT(*) FROM {$wpdb->posts} p\n        JOIN {$wpdb->postmeta} pm ON p.ID = pm.post_id\n        WHERE p.post_type = 'matches'\n        AND p.post_status = 'publish'\n        AND pm.meta_key = 'match_status'\n        AND pm.meta_value IN ('mutual', 'revealed', 'chatting')\n        AND p.ID IN (\n            SELECT post_id FROM {$wpdb->postmeta}\n            WHERE meta_key = %s AND meta_value = %s\n        )\n    \", $meta_key, $user_id));\n    \n    \/\/ Active chats\n    $stats['chatting'] = $wpdb->get_var($wpdb->prepare(\"\n        SELECT COUNT(*) FROM {$wpdb->posts} p\n        JOIN {$wpdb->postmeta} pm ON p.ID = pm.post_id\n        WHERE p.post_type = 'matches'\n        AND p.post_status = 'publish'\n        AND pm.meta_key = 'match_status'\n        AND pm.meta_value = 'chatting'\n        AND p.ID IN (\n            SELECT post_id FROM {$wpdb->postmeta}\n            WHERE meta_key = %s AND meta_value = %s\n        )\n    \", $meta_key, $user_id));\n    \n    \/\/ Pending (waiting for response)\n    $current_role_status = ($user_role === 'developer') ? 'developer_liked' : 'company_liked';\n    $stats['pending'] = $wpdb->get_var($wpdb->prepare(\"\n        SELECT COUNT(*) FROM {$wpdb->posts} p\n        JOIN {$wpdb->postmeta} pm ON p.ID = pm.post_id\n        WHERE p.post_type = 'matches'\n        AND p.post_status = 'publish'\n        AND pm.meta_key = 'match_status'\n        AND pm.meta_value = %s\n        AND p.ID IN (\n            SELECT post_id FROM {$wpdb->postmeta}\n            WHERE meta_key = %s AND meta_value = %s\n        )\n    \", $current_role_status, $meta_key, $user_id));\n    \n    return $stats;\n}\n\n\/\/ AJAX endpoint for match statistics\nadd_action('wp_ajax_get_match_stats', 'jobmatch_ajax_match_stats');\n\nfunction jobmatch_ajax_match_stats() {\n    $user_id = get_current_user_id();\n    \n    if (!$user_id) {\n        wp_send_json_error('Not logged in');\n    }\n    \n    $stats = jobmatch_get_match_stats($user_id);\n    wp_send_json_success($stats);\n}\n\n\/\/ Add CSS for matches display\nadd_action('wp_head', 'jobmatch_matches_styles');\n\nfunction jobmatch_matches_styles() {\n    ?>\n    <style>\n    .matches-container {\n        display: grid;\n        gap: 20px;\n        margin: 20px 0;\n    }\n    \n    .match-card {\n        background: white;\n        border-radius: 15px;\n        padding: 20px;\n        box-shadow: 0 4px 15px rgba(0,0,0,0.1);\n        border-left: 4px solid #ddd;\n    }\n    \n    .match-card.mutual,\n    .match-card.revealed,\n    .match-card.chatting {\n        border-left-color: #28a745;\n    }\n    \n    .match-card.developer_liked,\n    .match-card.company_liked {\n        border-left-color: #007cba;\n    }\n    \n    .match-card.passed {\n        border-left-color: #6c757d;\n        opacity: 0.7;\n    }\n    \n    .match-header {\n        display: flex;\n        align-items: center;\n        gap: 15px;\n        margin-bottom: 15px;\n    }\n    \n    .match-info h3 {\n        margin: 0;\n        color: #333;\n    }\n    \n    .match-info p {\n        margin: 5px 0;\n        color: #666;\n    }\n    \n    .match-status-badge {\n        margin-left: auto;\n        padding: 6px 12px;\n        border-radius: 20px;\n        background: #f8f9fa;\n        font-size: 0.85rem;\n        font-weight: bold;\n    }\n    \n    .revealed-contact {\n        background: #f8f9fa;\n        padding: 15px;\n        border-radius: 10px;\n        margin: 15px 0;\n        border-left: 4px solid #28a745;\n    }\n    \n    .revealed-contact h4 {\n        margin: 0 0 10px 0;\n        color: #28a745;\n    }\n    \n    .match-actions {\n        display: flex;\n        gap: 10px;\n        align-items: center;\n        flex-wrap: wrap;\n    }\n    \n    .match-actions button {\n        padding: 8px 16px;\n        border: none;\n        border-radius: 20px;\n        cursor: pointer;\n        font-weight: bold;\n        transition: all 0.3s ease;\n    }\n    \n    .btn-match-back {\n        background: linear-gradient(135deg, #11998e, #38ef7d);\n        color: white;\n    }\n    \n    .btn-chat {\n        background: linear-gradient(135deg, #667eea, #764ba2);\n        color: white;\n    }\n    \n    .btn-view-profile {\n        background: #f8f9fa;\n        color: #333;\n        border: 2px solid #dee2e6;\n    }\n    \n    .btn-pass {\n        background: #6c757d;\n        color: white;\n    }\n    \n    .match-date {\n        margin-left: auto;\n        font-size: 0.8rem;\n        color: #6c757d;\n    }\n    \n    .match-success-modal {\n        position: fixed;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        background: rgba(0,0,0,0.7);\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        z-index: 1000;\n    }\n    \n    .match-success-modal .modal-content {\n        background: white;\n        border-radius: 20px;\n        padding: 30px;\n        text-align: center;\n        max-width: 400px;\n        width: 90%;\n    }\n    \n    .modal-actions {\n        margin-top: 20px;\n        display: flex;\n        gap: 10px;\n        justify-content: center;\n    }\n    \n    .btn-primary {\n        background: linear-gradient(135deg, #667eea, #764ba2);\n        color: white;\n        padding: 12px 24px;\n        border: none;\n        border-radius: 25px;\n        cursor: pointer;\n        font-weight: bold;\n    }\n    \n    .btn-secondary {\n        background: #6c757d;\n        color: white;\n        padding: 12px 24px;\n        border: none;\n        border-radius: 25px;\n        cursor: pointer;\n    }\n    \n    .no-matches {\n        text-align: center;\n        padding: 40px;\n        color: #666;\n        font-style: italic;\n    }\n    <\/style>\n    <?php\n}","active":true,"modified":"2025-09-22 20:16:21","revision":"1"}]}