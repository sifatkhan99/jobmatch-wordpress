{"generator":"Code Snippets v3.7.0","date_created":"2025-09-26 10:47","snippets":[{"id":8,"name":"02-anonymity\/avatar-anonymity-system.php","code":"\n\/**\n * Anonymity and Avatar System for Job Matching Platform\n * Add this to Code Snippets plugin\n *\/\n\n\/\/ Define avatar options (30 different avatars for developers)\nfunction jobmatch_get_developer_avatars() {\n    return array(\n        'avatar_1' => '\ud83d\udc68\u200d\ud83d\udcbb', 'avatar_2' => '\ud83d\udc69\u200d\ud83d\udcbb', 'avatar_3' => '\ud83e\uddd1\u200d\ud83d\udcbb',\n        'avatar_4' => '\ud83d\udc68\u200d\ud83d\udd2c', 'avatar_5' => '\ud83d\udc69\u200d\ud83d\udd2c', 'avatar_6' => '\ud83e\uddd1\u200d\ud83d\udd2c',\n        'avatar_7' => '\ud83d\udc68\u200d\ud83c\udfa8', 'avatar_8' => '\ud83d\udc69\u200d\ud83c\udfa8', 'avatar_9' => '\ud83e\uddd1\u200d\ud83c\udfa8',\n        'avatar_10' => '\ud83d\udc68\u200d\ud83c\udfeb', 'avatar_11' => '\ud83d\udc69\u200d\ud83c\udfeb', 'avatar_12' => '\ud83e\uddd1\u200d\ud83c\udfeb',\n        'avatar_13' => '\ud83d\udc68\u200d\ud83d\udcbc', 'avatar_14' => '\ud83d\udc69\u200d\ud83d\udcbc', 'avatar_15' => '\ud83e\uddd1\u200d\ud83d\udcbc',\n        'avatar_16' => '\ud83d\udd75\ufe0f\u200d\u2642\ufe0f', 'avatar_17' => '\ud83d\udd75\ufe0f\u200d\u2640\ufe0f', 'avatar_18' => '\ud83d\udd75\ufe0f',\n        'avatar_19' => '\ud83d\udc68\u200d\ud83d\ude80', 'avatar_20' => '\ud83d\udc69\u200d\ud83d\ude80', 'avatar_21' => '\ud83e\uddd1\u200d\ud83d\ude80',\n        'avatar_22' => '\ud83e\uddb8\u200d\u2642\ufe0f', 'avatar_23' => '\ud83e\uddb8\u200d\u2640\ufe0f', 'avatar_24' => '\ud83e\uddb8',\n        'avatar_25' => '\ud83e\uddd9\u200d\u2642\ufe0f', 'avatar_26' => '\ud83e\uddd9\u200d\u2640\ufe0f', 'avatar_27' => '\ud83e\uddd9',\n        'avatar_28' => '\ud83e\udd16', 'avatar_29' => '\ud83d\udc7e', 'avatar_30' => '\ud83c\udfaf'\n    );\n}\n\n\/\/ Define industry icons for companies\nfunction jobmatch_get_industry_icons() {\n    return array(\n        'technology' => array('icon' => '\ud83d\udcbb', 'color' => '#667eea', 'name' => 'Tech Company'),\n        'finance' => array('icon' => '\ud83d\udcb0', 'color' => '#11998e', 'name' => 'Finance Company'),\n        'healthcare' => array('icon' => '\ud83c\udfe5', 'color' => '#fa709a', 'name' => 'Healthcare Company'),\n        'ecommerce' => array('icon' => '\ud83d\uded2', 'color' => '#f093fb', 'name' => 'E-commerce Company'),\n        'manufacturing' => array('icon' => '\ud83c\udfed', 'color' => '#4facfe', 'name' => 'Manufacturing Company'),\n        'education' => array('icon' => '\ud83c\udf93', 'color' => '#43e97b', 'name' => 'Education Company'),\n        'media' => array('icon' => '\ud83d\udcfa', 'color' => '#fa709a', 'name' => 'Media Company'),\n        'consulting' => array('icon' => '\ud83d\udcbc', 'color' => '#667eea', 'name' => 'Consulting Firm'),\n        'startup' => array('icon' => '\ud83d\ude80', 'color' => '#f093fb', 'name' => 'Startup'),\n        'enterprise' => array('icon' => '\ud83c\udfe2', 'color' => '#4facfe', 'name' => 'Enterprise')\n    );\n}\n\n\/\/ Get anonymous profile data for display\nfunction jobmatch_get_anonymous_profile($user_id, $viewer_id = null, $context = 'browse') {\n    $user_role = get_user_meta($user_id, 'user_role', true);\n    $viewer_role = $viewer_id ? get_user_meta($viewer_id, 'user_role', true) : null;\n    \n    \/\/ Check if identity should be revealed\n    $is_revealed = false;\n    if ($viewer_id && $user_id && $viewer_id !== $user_id) {\n        $is_revealed = jobmatch_is_identity_revealed($user_id, $viewer_id);\n    }\n    \n    if ($user_role === 'developer') {\n        return jobmatch_get_anonymous_developer_profile($user_id, $is_revealed);\n    } elseif ($user_role === 'company') {\n        return jobmatch_get_anonymous_company_profile($user_id, $is_revealed);\n    }\n    \n    return false;\n}\n\n\/\/ Get anonymous developer profile\nfunction jobmatch_get_anonymous_developer_profile($user_id, $is_revealed = false) {\n    $avatars = jobmatch_get_developer_avatars();\n    $avatar_key = get_user_meta($user_id, 'anonymous_avatar', true);\n    \n    $profile = array(\n        'id' => $user_id,\n        'type' => 'developer',\n        'avatar' => $avatars[$avatar_key] ?? '\ud83d\udc68\u200d\ud83d\udcbb',\n        'avatar_key' => $avatar_key,\n        'is_revealed' => $is_revealed\n    );\n    \n    if ($is_revealed) {\n        \/\/ Show real information\n        $user = get_userdata($user_id);\n        $profile['name'] = $user->display_name;\n        $profile['email'] = $user->user_email;\n        $profile['real_name'] = get_user_meta($user_id, 'first_name', true) . ' ' . get_user_meta($user_id, 'last_name', true);\n        $profile['linkedin'] = get_user_meta($user_id, 'linkedin_profile', true);\n        $profile['portfolio'] = get_user_meta($user_id, 'portfolio_url', true);\n        $profile['github'] = get_user_meta($user_id, 'github_profile', true);\n    } else {\n        \/\/ Show anonymous information\n        $profile['name'] = jobmatch_generate_anonymous_developer_title($user_id);\n    }\n    \n    \/\/ Common information (always visible)\n    $profile['tech_skills'] = get_user_meta($user_id, 'tech_skills', true) ?: array();\n    $profile['experience_level'] = get_user_meta($user_id, 'experience_level', true);\n    $profile['work_preference'] = get_user_meta($user_id, 'work_preference', true);\n    $profile['salary_expectation'] = get_user_meta($user_id, 'salary_expectation', true);\n    $profile['location'] = jobmatch_get_anonymous_location($user_id);\n    $profile['profile_summary'] = get_user_meta($user_id, 'profile_summary', true);\n    \n    return $profile;\n}\n\n\/\/ Get anonymous company profile\nfunction jobmatch_get_anonymous_company_profile($user_id, $is_revealed = false) {\n    $industry = get_user_meta($user_id, 'industry', true) ?: 'technology';\n    $industry_icons = jobmatch_get_industry_icons();\n    $industry_data = $industry_icons[$industry] ?? $industry_icons['technology'];\n    \n    $profile = array(\n        'id' => $user_id,\n        'type' => 'company',\n        'industry' => $industry,\n        'industry_icon' => $industry_data['icon'],\n        'industry_color' => $industry_data['color'],\n        'is_revealed' => $is_revealed\n    );\n    \n    if ($is_revealed) {\n        \/\/ Show real company information\n        $profile['name'] = get_user_meta($user_id, 'real_company_name', true);\n        $profile['website'] = get_user_meta($user_id, 'real_website', true);\n        $profile['logo_url'] = get_user_meta($user_id, 'real_logo_url', true);\n        $profile['description'] = get_user_meta($user_id, 'company_description', true);\n        $profile['contact_email'] = get_userdata($user_id)->user_email;\n    } else {\n        \/\/ Show anonymous information\n        $profile['name'] = $industry_data['name'];\n    }\n    \n    \/\/ Common information (always visible)\n    $profile['company_size'] = get_user_meta($user_id, 'company_size', true);\n    $profile['location'] = jobmatch_get_anonymous_location($user_id);\n    $profile['culture_values'] = get_user_meta($user_id, 'culture_answers', true) ?: array();\n    \n    return $profile;\n}\n\n\/\/ Generate anonymous developer title based on skills\nfunction jobmatch_generate_anonymous_developer_title($user_id) {\n    $tech_skills = get_user_meta($user_id, 'tech_skills', true) ?: array();\n    $experience_level = get_user_meta($user_id, 'experience_level', true);\n    \n    \/\/ Get primary skill\n    $primary_skill = '';\n    $skill_titles = array(\n        'react' => 'React',\n        'vue' => 'Vue.js', \n        'angular' => 'Angular',\n        'node' => 'Node.js',\n        'python' => 'Python',\n        'php' => 'PHP',\n        'java' => 'Java',\n        'javascript' => 'JavaScript',\n        'typescript' => 'TypeScript'\n    );\n    \n    foreach ($tech_skills as $skill) {\n        if (isset($skill_titles[$skill])) {\n            $primary_skill = $skill_titles[$skill];\n            break;\n        }\n    }\n    \n    \/\/ Fallback to generic title\n    if (!$primary_skill) {\n        $primary_skill = 'Full Stack';\n    }\n    \n    \/\/ Add experience level prefix\n    $level_prefix = '';\n    switch ($experience_level) {\n        case 'junior':\n            $level_prefix = 'Junior ';\n            break;\n        case 'senior':\n            $level_prefix = 'Senior ';\n            break;\n        case 'lead':\n            $level_prefix = 'Lead ';\n            break;\n        default:\n            $level_prefix = '';\n    }\n    \n    return $level_prefix . $primary_skill . ' Developer';\n}\n\n\/\/ Get anonymous location (city + country only)\nfunction jobmatch_get_anonymous_location($user_id) {\n    $postal_code = get_user_meta($user_id, 'postal_code', true);\n    \n    if (!$postal_code) {\n        return 'Location not specified';\n    }\n    \n    \/\/ Get coordinates and city from postal code\n    $coordinates = jobmatch_get_postal_coordinates($postal_code);\n    return $coordinates['city'] . ', Germany';\n}\n\n\/\/ Check if identity is revealed between two users\nfunction jobmatch_is_identity_revealed($user1_id, $user2_id) {\n    global $wpdb;\n    \n    \/\/ Check if there's a mutual match between users\n    $match = $wpdb->get_row($wpdb->prepare(\"\n        SELECT * FROM {$wpdb->posts} \n        WHERE post_type = 'matches' \n        AND post_status = 'publish'\n        AND ID IN (\n            SELECT post_id FROM {$wpdb->postmeta} \n            WHERE (meta_key = 'developer_id' AND meta_value = %s)\n            OR (meta_key = 'company_id' AND meta_value = %s)\n        )\n        AND ID IN (\n            SELECT post_id FROM {$wpdb->postmeta}\n            WHERE (meta_key = 'developer_id' AND meta_value = %s)\n            OR (meta_key = 'company_id' AND meta_value = %s)\n        )\n        AND ID IN (\n            SELECT post_id FROM {$wpdb->postmeta}\n            WHERE meta_key = 'match_status' \n            AND meta_value IN ('mutual', 'revealed', 'chatting')\n        )\n    \", $user1_id, $user1_id, $user2_id, $user2_id));\n    \n    return !empty($match);\n}\n\n\/\/ Shortcode to display user avatar\nadd_shortcode('jobmatch_avatar', 'jobmatch_avatar_shortcode');\n\nfunction jobmatch_avatar_shortcode($atts) {\n    $atts = shortcode_atts(array(\n        'user_id' => get_current_user_id(),\n        'size' => 'medium',\n        'viewer_id' => get_current_user_id()\n    ), $atts);\n    \n    $profile = jobmatch_get_anonymous_profile($atts['user_id'], $atts['viewer_id']);\n    \n    if (!$profile) return '';\n    \n    $size_class = 'avatar-' . $atts['size'];\n    \n    if ($profile['type'] === 'developer') {\n        return '<span class=\"jobmatch-avatar developer-avatar ' . $size_class . '\">' . $profile['avatar'] . '<\/span>';\n    } else {\n        $style = 'background-color: ' . $profile['industry_color'];\n        return '<span class=\"jobmatch-avatar company-avatar ' . $size_class . '\" style=\"' . $style . '\">' . $profile['industry_icon'] . '<\/span>';\n    }\n}\n\n\/\/ Add CSS for avatars\nadd_action('wp_head', 'jobmatch_avatar_styles');\n\nfunction jobmatch_avatar_styles() {\n    ?>\n    <style>\n    .jobmatch-avatar {\n        display: inline-flex;\n        align-items: center;\n        justify-content: center;\n        border-radius: 50%;\n        font-weight: bold;\n        color: white;\n    }\n    \n    .avatar-small {\n        width: 30px;\n        height: 30px;\n        font-size: 16px;\n    }\n    \n    .avatar-medium {\n        width: 50px;\n        height: 50px;\n        font-size: 24px;\n    }\n    \n    .avatar-large {\n        width: 80px;\n        height: 80px;\n        font-size: 36px;\n    }\n    \n    .developer-avatar {\n        background: linear-gradient(135deg, #667eea, #764ba2);\n    }\n    \n    .company-avatar {\n        \/* Background color set inline based on industry *\/\n        background: linear-gradient(135deg, var(--industry-color, #667eea), rgba(0,0,0,0.2));\n    }\n    \n    .profile-card {\n        background: white;\n        border-radius: 15px;\n        padding: 20px;\n        box-shadow: 0 4px 15px rgba(0,0,0,0.1);\n        margin-bottom: 20px;\n    }\n    \n    .profile-header {\n        display: flex;\n        align-items: center;\n        gap: 15px;\n        margin-bottom: 15px;\n    }\n    \n    .profile-info h3 {\n        margin: 0;\n        color: #333;\n    }\n    \n    .profile-info p {\n        margin: 5px 0 0 0;\n        color: #666;\n    }\n    \n    .tech-skills {\n        display: flex;\n        flex-wrap: wrap;\n        gap: 8px;\n        margin: 15px 0;\n    }\n    \n    .tech-tag {\n        background: #e9ecef;\n        padding: 4px 12px;\n        border-radius: 15px;\n        font-size: 0.85rem;\n        color: #495057;\n        font-weight: 500;\n    }\n    \n    .revealed-info {\n        background: linear-gradient(135deg, #f8f9fa, #e9ecef);\n        padding: 15px;\n        border-radius: 10px;\n        margin-top: 15px;\n        border-left: 4px solid #28a745;\n    }\n    \n    .revealed-info h4 {\n        margin: 0 0 10px 0;\n        color: #28a745;\n    }\n    <\/style>\n    <?php\n}\n\n\/\/ Function to render profile card\nfunction jobmatch_render_profile_card($user_id, $viewer_id = null, $show_match_button = true) {\n    $profile = jobmatch_get_anonymous_profile($user_id, $viewer_id);\n    \n    if (!$profile) return '';\n    \n    ob_start();\n    ?>\n    <div class=\"profile-card\" data-user-id=\"<?php echo $user_id; ?>\">\n        <div class=\"profile-header\">\n            <?php if ($profile['type'] === 'developer'): ?>\n                <span class=\"jobmatch-avatar developer-avatar avatar-large\"><?php echo $profile['avatar']; ?><\/span>\n            <?php else: ?>\n                <span class=\"jobmatch-avatar company-avatar avatar-large\" style=\"background-color: <?php echo $profile['industry_color']; ?>\"><?php echo $profile['industry_icon']; ?><\/span>\n            <?php endif; ?>\n            \n            <div class=\"profile-info\">\n                <h3><?php echo esc_html($profile['name']); ?><\/h3>\n                <p><?php echo esc_html($profile['location']); ?><\/p>\n                \n                <?php if ($profile['type'] === 'developer'): ?>\n                    <p><strong>Experience:<\/strong> <?php echo ucfirst($profile['experience_level']); ?><\/p>\n                    <p><strong>Work Preference:<\/strong> <?php echo ucfirst($profile['work_preference']); ?><\/p>\n                    <?php if ($profile['salary_expectation']): ?>\n                        <p><strong>Salary:<\/strong> \u20ac<?php echo number_format($profile['salary_expectation']); ?><\/p>\n                    <?php endif; ?>\n                <?php else: ?>\n                    <p><strong>Industry:<\/strong> <?php echo ucfirst($profile['industry']); ?><\/p>\n                    <p><strong>Size:<\/strong> <?php echo $profile['company_size']; ?> employees<\/p>\n                <?php endif; ?>\n            <\/div>\n            \n            <?php if ($viewer_id): ?>\n                <div class=\"match-score\">\n                    <?php \n                    $score = jobmatch_get_match_score($viewer_id, $user_id, $profile['type']);\n                    echo $score ? $score->score . '%' : 'Calculating...';\n                    ?>\n                <\/div>\n            <?php endif; ?>\n        <\/div>\n        \n        <?php if ($profile['type'] === 'developer' && !empty($profile['tech_skills'])): ?>\n            <div class=\"tech-skills\">\n                <?php foreach ($profile['tech_skills'] as $skill): ?>\n                    <span class=\"tech-tag\"><?php echo esc_html($skill); ?><\/span>\n                <?php endforeach; ?>\n            <\/div>\n        <?php endif; ?>\n        \n        <?php if ($profile['profile_summary']): ?>\n            <p class=\"profile-summary\"><?php echo esc_html($profile['profile_summary']); ?><\/p>\n        <?php endif; ?>\n        \n        <?php if ($profile['is_revealed']): ?>\n            <div class=\"revealed-info\">\n                <h4>\ud83c\udf89 Contact Information<\/h4>\n                <?php if ($profile['type'] === 'developer'): ?>\n                    <?php if ($profile['real_name']): ?>\n                        <p><strong>Name:<\/strong> <?php echo esc_html($profile['real_name']); ?><\/p>\n                    <?php endif; ?>\n                    <p><strong>Email:<\/strong> <?php echo esc_html($profile['email']); ?><\/p>\n                    <?php if ($profile['linkedin']): ?>\n                        <p><strong>LinkedIn:<\/strong> <a href=\"<?php echo esc_url($profile['linkedin']); ?>\" target=\"_blank\">View Profile<\/a><\/p>\n                    <?php endif; ?>\n                    <?php if ($profile['github']): ?>\n                        <p><strong>GitHub:<\/strong> <a href=\"<?php echo esc_url($profile['github']); ?>\" target=\"_blank\">View Profile<\/a><\/p>\n                    <?php endif; ?>\n                    <?php if ($profile['portfolio']): ?>\n                        <p><strong>Portfolio:<\/strong> <a href=\"<?php echo esc_url($profile['portfolio']); ?>\" target=\"_blank\">View Portfolio<\/a><\/p>\n                    <?php endif; ?>\n                <?php else: ?>\n                    <p><strong>Company:<\/strong> <?php echo esc_html($profile['name']); ?><\/p>\n                    <p><strong>Email:<\/strong> <?php echo esc_html($profile['contact_email']); ?><\/p>\n                    <?php if ($profile['website']): ?>\n                        <p><strong>Website:<\/strong> <a href=\"<?php echo esc_url($profile['website']); ?>\" target=\"_blank\"><?php echo esc_html($profile['website']); ?><\/a><\/p>\n                    <?php endif; ?>\n                <?php endif; ?>\n            <\/div>\n        <?php endif; ?>\n        \n        <?php if ($show_match_button && $viewer_id && $viewer_id !== $user_id): ?>\n            <div class=\"profile-actions\">\n                <?php echo jobmatch_render_match_button($user_id, $viewer_id); ?>\n            <\/div>\n        <?php endif; ?>\n    <\/div>\n    <?php\n    return ob_get_clean();\n}\n\n\/\/ Function to render match button\nfunction jobmatch_render_match_button($target_user_id, $current_user_id) {\n    \/\/ Check current match status\n    $match_status = jobmatch_get_match_status($target_user_id, $current_user_id);\n    \n    $button_class = 'match-btn';\n    $button_text = '\u2764\ufe0f Match';\n    $button_action = 'match';\n    \n    switch ($match_status) {\n        case 'none':\n            $button_class = 'match-btn';\n            $button_text = '\u2764\ufe0f Match';\n            $button_action = 'match';\n            break;\n        case 'sent':\n            $button_class = 'match-btn matched';\n            $button_text = '\u23f3 Waiting...';\n            $button_action = 'waiting';\n            break;\n        case 'received':\n            $button_class = 'match-btn received';\n            $button_text = '\ud83d\udc9a Match Back';\n            $button_action = 'match_back';\n            break;\n        case 'mutual':\n            $button_class = 'match-btn mutual';\n            $button_text = '\ud83d\udcac Chat Now';\n            $button_action = 'chat';\n            break;\n    }\n    \n    return sprintf(\n        '<button class=\"%s\" data-user-id=\"%d\" data-action=\"%s\" onclick=\"handleMatchAction(this)\">%s<\/button>',\n        $button_class,\n        $target_user_id,\n        $button_action,\n        $button_text\n    );\n}\n\n\/\/ Get match status between two users\nfunction jobmatch_get_match_status($user1_id, $user2_id) {\n    global $wpdb;\n    \n    \/\/ Find any existing match between these users\n    $match = $wpdb->get_row($wpdb->prepare(\"\n        SELECT p.*, \n               m1.meta_value as developer_id,\n               m2.meta_value as company_id,\n               m3.meta_value as match_status\n        FROM {$wpdb->posts} p\n        LEFT JOIN {$wpdb->postmeta} m1 ON p.ID = m1.post_id AND m1.meta_key = 'developer_id'\n        LEFT JOIN {$wpdb->postmeta} m2 ON p.ID = m2.post_id AND m2.meta_key = 'company_id'  \n        LEFT JOIN {$wpdb->postmeta} m3 ON p.ID = m3.post_id AND m3.meta_key = 'match_status'\n        WHERE p.post_type = 'matches'\n        AND p.post_status = 'publish'\n        AND ((m1.meta_value = %s AND m2.meta_value = %s) OR (m1.meta_value = %s AND m2.meta_value = %s))\n    \", $user1_id, $user2_id, $user2_id, $user1_id));\n    \n    if (!$match) {\n        return 'none';\n    }\n    \n    $current_user_role = get_user_meta(get_current_user_id(), 'user_role', true);\n    $match_status = $match->match_status;\n    \n    \/\/ Determine status from current user's perspective\n    if ($match_status === 'mutual' || $match_status === 'revealed' || $match_status === 'chatting') {\n        return 'mutual';\n    }\n    \n    \/\/ Check who initiated the match\n    if ($current_user_role === 'developer' && $match_status === 'developer_liked') {\n        return 'sent';\n    } elseif ($current_user_role === 'company' && $match_status === 'company_liked') {\n        return 'sent';\n    } elseif ($current_user_role === 'developer' && $match_status === 'company_liked') {\n        return 'received';\n    } elseif ($current_user_role === 'company' && $match_status === 'developer_liked') {\n        return 'received';\n    }\n    \n    return 'none';\n}\n\n\/\/ Privacy filter for user queries - prevent data leakage\nadd_filter('users_clauses', 'jobmatch_filter_user_queries', 10, 2);\n\nfunction jobmatch_filter_user_queries($clauses, $wp_user_query) {\n    \/\/ Skip if admin or not logged in\n    if (is_admin() || !is_user_logged_in()) {\n        return $clauses;\n    }\n    \n    $current_user = wp_get_current_user();\n    $current_role = get_user_meta($current_user->ID, 'user_role', true);\n    \n    \/\/ If no specific role filtering is requested, apply default privacy\n    if (!isset($wp_user_query->meta_query->queries)) {\n        global $wpdb;\n        \n        if ($current_role === 'developer') {\n            \/\/ Developers can only see companies\n            $clauses['join'] .= \" INNER JOIN {$wpdb->usermeta} um_role ON {$wpdb->users}.ID = um_role.user_id\";\n            $clauses['where'] .= \" AND um_role.meta_key = 'user_role' AND um_role.meta_value = 'company'\";\n        } elseif ($current_role === 'company') {\n            \/\/ Companies can only see developers  \n            $clauses['join'] .= \" INNER JOIN {$wpdb->usermeta} um_role ON {$wpdb->users}.ID = um_role.user_id\";\n            $clauses['where'] .= \" AND um_role.meta_key = 'user_role' AND um_role.meta_value = 'developer'\";\n        }\n    }\n    \n    return $clauses;\n}\n\n\/\/ Ajax handler for profile preview\nadd_action('wp_ajax_get_profile_preview', 'jobmatch_ajax_profile_preview');\n\nfunction jobmatch_ajax_profile_preview() {\n    check_ajax_referer('jobmatch_nonce', 'nonce');\n    \n    $user_id = intval($_POST['user_id']);\n    $viewer_id = get_current_user_id();\n    \n    if (!$user_id || !$viewer_id) {\n        wp_send_json_error('Invalid user ID');\n    }\n    \n    \/\/ Security check - ensure users can see each other\n    $viewer_role = get_user_meta($viewer_id, 'user_role', true);\n    $target_role = get_user_meta($user_id, 'user_role', true);\n    \n    if (($viewer_role === 'developer' && $target_role !== 'company') || \n        ($viewer_role === 'company' && $target_role !== 'developer')) {\n        wp_send_json_error('Access denied');\n    }\n    \n    $profile_html = jobmatch_render_profile_card($user_id, $viewer_id, true);\n    \n    wp_send_json_success(array(\n        'html' => $profile_html\n    ));\n}\n\n\/\/ Function to safely get user display name (anonymous or revealed)\nfunction jobmatch_get_display_name($user_id, $viewer_id = null) {\n    $profile = jobmatch_get_anonymous_profile($user_id, $viewer_id);\n    return $profile ? $profile['name'] : 'Unknown User';\n}\n\n\/\/ Function to safely get user avatar (anonymous or revealed)  \nfunction jobmatch_get_display_avatar($user_id, $viewer_id = null, $size = 'medium') {\n    return jobmatch_avatar_shortcode(array(\n        'user_id' => $user_id,\n        'viewer_id' => $viewer_id,\n        'size' => $size\n    ));\n}\n\n\/\/ Shortcode for anonymous profile display\nadd_shortcode('jobmatch_profile', 'jobmatch_profile_shortcode');\n\nfunction jobmatch_profile_shortcode($atts) {\n    $atts = shortcode_atts(array(\n        'user_id' => 0,\n        'viewer_id' => get_current_user_id(),\n        'show_match_button' => true\n    ), $atts);\n    \n    if (!$atts['user_id']) {\n        return 'Invalid user ID';\n    }\n    \n    return jobmatch_render_profile_card($atts['user_id'], $atts['viewer_id'], $atts['show_match_button']);\n}\n\n\/\/ Privacy audit log\nfunction jobmatch_log_profile_access($accessed_user_id, $accessor_user_id, $data_revealed = false) {\n    $log_entry = array(\n        'timestamp' => current_time('mysql'),\n        'accessed_user' => $accessed_user_id,\n        'accessor_user' => $accessor_user_id,\n        'data_revealed' => $data_revealed,\n        'ip_address' => $_SERVER['REMOTE_ADDR'],\n        'user_agent' => $_SERVER['HTTP_USER_AGENT']\n    );\n    \n    \/\/ Store in options table with timestamp key\n    $log_key = 'profile_access_' . time() . '_' . $accessed_user_id . '_' . $accessor_user_id;\n    update_option($log_key, $log_entry);\n    \n    \/\/ Clean up old logs (keep only last 30 days)\n    $cutoff_time = time() - (30 * 24 * 60 * 60);\n    $old_logs = get_option('profile_access_logs_cleanup', $cutoff_time);\n    \n    if ($cutoff_time > $old_logs) {\n        global $wpdb;\n        $wpdb->query($wpdb->prepare(\"\n            DELETE FROM {$wpdb->options} \n            WHERE option_name LIKE 'profile_access_%%' \n            AND option_name < %s\n        \", 'profile_access_' . $cutoff_time));\n        \n        update_option('profile_access_logs_cleanup', $cutoff_time);\n    }\n}","active":true,"modified":"2025-09-22 20:14:09","revision":"1"}]}